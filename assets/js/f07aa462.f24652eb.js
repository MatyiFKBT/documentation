"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[4059],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>g});var n=a(67294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=p(a),g=l,k=m["".concat(s,".").concat(g)]||m[g]||d[g]||r;return a?n.createElement(k,i(i({ref:t},u),{},{components:a})):n.createElement(k,i({ref:t},u))}));function g(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var p=2;p<r;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},45990:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var n=a(87462),l=(a(67294),a(3905));const r={id:"api",title:"API",sidebar_label:"API",slug:"/web/using_with_angular/api"},i=void 0,o={unversionedId:"web/using_with_angular/api",id:"web/using_with_angular/api",title:"API",description:"NgxTolgeeModule",source:"@site/docs/web/using_with_angular/api.mdx",sourceDirName:"web/using_with_angular",slug:"/web/using_with_angular/api",permalink:"/docs/web/using_with_angular/api",draft:!1,editUrl:"https://github.com/tolgee/documentation/tree/main/docs/web/using_with_angular/api.mdx",tags:[],version:"current",frontMatter:{id:"api",title:"API",sidebar_label:"API",slug:"/web/using_with_angular/api"},sidebar:"someSidebar",previous:{title:"Preparing for production",permalink:"/docs/web/using_with_angular/angular_preparing_for_production"},next:{title:"Installation",permalink:"/docs/web/using_with_vue/installation"}},s={},p=[{value:"NgxTolgeeModule",id:"ngxtolgeemodule",level:2},{value:"Method <code>forRoot</code>",id:"method-forroot",level:3},{value:"TranslateService",id:"translateservice",level:2},{value:"method <code>get</code>",id:"method-get",level:3},{value:"method <code>getSafe</code>",id:"method-getsafe",level:3},{value:"method <code>instant</code>",id:"method-instant",level:3},{value:"method <code>instantSafe</code>",id:"method-instantsafe",level:3},{value:"method <code>getCurrentLang</code>",id:"method-getcurrentlang",level:3},{value:"returns <code>string</code>",id:"returns-string",level:4},{value:"method <code>setLang</code>",id:"method-setlang",level:3},{value:"parameter language",id:"parameter-language",level:4},{value:"method start",id:"method-start",level:3},{value:"onLangChange",id:"onlangchange",level:3},{value:"onTranslationChange",id:"ontranslationchange",level:3},{value:"type <code>TranslationData</code>",id:"type-translationdata",level:4},{value:"TComponent",id:"tcomponent",level:3},{value:"<code>translate</code> pipe",id:"translate-pipe",level:3},{value:"<code>stranslate</code> pipe",id:"stranslate-pipe",level:3}],u={toc:p};function d(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"ngxtolgeemodule"},"NgxTolgeeModule"),(0,l.kt)("p",null,"The Tolgee Module. Use it to configure Tolgee for module."),(0,l.kt)("p",null,"Example usage:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"@NgModule({\n  declarations: [\n    ...\n  ],\n  imports: [\n    ...\n    NgxTolgeeModule.forRoot({\n      staticData: {\n        en: () => import('../i18n/en.json'),\n        cs: () => import('../i18n/cs.json'),\n      },\n      preloadFallback: true,\n      apiUrl: environment.tolgeeApiUrl,\n      apiKey: environment.tolgeeApiKey,\n      ui: UI,\n    })\n  ],\n})\n")),(0,l.kt)("h3",{id:"method-forroot"},"Method ",(0,l.kt)("inlineCode",{parentName:"h3"},"forRoot")),(0,l.kt)("p",null,"Returns ",(0,l.kt)("inlineCode",{parentName:"p"},"ModuleWithProviders<NgxTolgeeModule>"),". Enables passing configuration to the module."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"parameter ",(0,l.kt)("inlineCode",{parentName:"li"},"options")," - Tolgee configuration properties described in ",(0,l.kt)("a",{parentName:"li",href:"../configuration"},(0,l.kt)("inlineCode",{parentName:"a"},"configuration"))," section.")),(0,l.kt)("h2",{id:"translateservice"},"TranslateService"),(0,l.kt)("p",null,"Contains methods to translate text used by other components."),(0,l.kt)("h3",{id:"method-get"},"method ",(0,l.kt)("inlineCode",{parentName:"h3"},"get")),(0,l.kt)("p",null,"Returns ",(0,l.kt)("inlineCode",{parentName:"p"},"Observable")," providing current translation value depending on current language. When language or translation\nis changed, new value is emitted. This method is wrapping the string in development mode."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"this.subscription = this.translateService\n      .get('this_is_a_key_with_params', { key: 'value' }, 'Default value')\n      .subscribe((val) => (this.translated = val));\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"returns observable emitting the translated value - ",(0,l.kt)("inlineCode",{parentName:"li"},"Observable<string>")),(0,l.kt)("li",{parentName:"ul"},"parameter ",(0,l.kt)("inlineCode",{parentName:"li"},"key")," - The key to translate."),(0,l.kt)("li",{parentName:"ul"},"parameter ",(0,l.kt)("inlineCode",{parentName:"li"},"params")," - Parameters to interpolate."),(0,l.kt)("li",{parentName:"ul"},"parameter ",(0,l.kt)("inlineCode",{parentName:"li"},"defaultValue")," - Value to render, when no translation is provided.")),(0,l.kt)("h3",{id:"method-getsafe"},"method ",(0,l.kt)("inlineCode",{parentName:"h3"},"getSafe")),(0,l.kt)("p",null,"Returns Observable providing current translation value depending on current language. When language or translation\nis changed, new value is emitted. This method doesn't wrap the key, so in-context localization won't be supported."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"this.subscription = this.translateService\n  .getSafe('this_is_a_key_with_params', { key: 'value' }, 'Default value')\n  .subscribe((val) => (this.translated = val));\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"returns observable emitting the translated value - ",(0,l.kt)("inlineCode",{parentName:"li"},"Observable<string>")),(0,l.kt)("li",{parentName:"ul"},"parameter ",(0,l.kt)("inlineCode",{parentName:"li"},"key")," - The key to translate. ",(0,l.kt)("inlineCode",{parentName:"li"},"string")),(0,l.kt)("li",{parentName:"ul"},"parameter ",(0,l.kt)("inlineCode",{parentName:"li"},"params")," - Parameters to interpolate. ",(0,l.kt)("inlineCode",{parentName:"li"},"Record<string, any>")),(0,l.kt)("li",{parentName:"ul"},"parameter ",(0,l.kt)("inlineCode",{parentName:"li"},"defaultValue")," - Value to render, when no translation is provided. ",(0,l.kt)("inlineCode",{parentName:"li"},"string"))),(0,l.kt)("h3",{id:"method-instant"},"method ",(0,l.kt)("inlineCode",{parentName:"h3"},"instant")),(0,l.kt)("p",null,"Returns the translated value synchronously. When language or translation\nis changed it emits new value. This method is wrapping the key in development mode."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const translated = this.translateService\n  .instant('this_is_a_key_with_params', { key: 'value' }, 'Default value')\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"returns - the translated value ",(0,l.kt)("inlineCode",{parentName:"li"},"string")),(0,l.kt)("li",{parentName:"ul"},"parameter ",(0,l.kt)("inlineCode",{parentName:"li"},"key")," - The key to translate. ",(0,l.kt)("inlineCode",{parentName:"li"},"string")),(0,l.kt)("li",{parentName:"ul"},"parameter ",(0,l.kt)("inlineCode",{parentName:"li"},"params")," - Parameters to interpolate. ",(0,l.kt)("inlineCode",{parentName:"li"},"Record<string, any>")),(0,l.kt)("li",{parentName:"ul"},"parameter ",(0,l.kt)("inlineCode",{parentName:"li"},"defaultValue")," - Value to render, when no translation is provided. ",(0,l.kt)("inlineCode",{parentName:"li"},"string"))),(0,l.kt)("h3",{id:"method-instantsafe"},"method ",(0,l.kt)("inlineCode",{parentName:"h3"},"instantSafe")),(0,l.kt)("p",null,"Returns the translated value synchronously. When language or translation\nis changed it emits new value. This method doesn't wrap the key, so in-context localization won't be supported."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const translated = this.translateService\n  .instantSafe('this_is_a_key_with_params', { key: 'value' }, 'Default value')\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"returns - the translated value ",(0,l.kt)("inlineCode",{parentName:"li"},"string")),(0,l.kt)("li",{parentName:"ul"},"parameter ",(0,l.kt)("inlineCode",{parentName:"li"},"key")," - The key to translate. ",(0,l.kt)("inlineCode",{parentName:"li"},"string")),(0,l.kt)("li",{parentName:"ul"},"parameter ",(0,l.kt)("inlineCode",{parentName:"li"},"params")," - Parameters to interpolate. ",(0,l.kt)("inlineCode",{parentName:"li"},"Record<string, any>")),(0,l.kt)("li",{parentName:"ul"},"parameter ",(0,l.kt)("inlineCode",{parentName:"li"},"defaultValue")," - Value to render, when no translation is provided. ",(0,l.kt)("inlineCode",{parentName:"li"},"string"))),(0,l.kt)("h3",{id:"method-getcurrentlang"},"method ",(0,l.kt)("inlineCode",{parentName:"h3"},"getCurrentLang")),(0,l.kt)("p",null,"Returns current language"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'this.translateService.getCurrentLang() // "en"\n')),(0,l.kt)("h4",{id:"returns-string"},"returns ",(0,l.kt)("inlineCode",{parentName:"h4"},"string")),(0,l.kt)("h3",{id:"method-setlang"},"method ",(0,l.kt)("inlineCode",{parentName:"h3"},"setLang")),(0,l.kt)("p",null,"Sets current language"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"this.translateService.setLang('en')\n")),(0,l.kt)("h4",{id:"parameter-language"},"parameter language"),(0,l.kt)("p",null,"The language to be set."),(0,l.kt)("h3",{id:"method-start"},"method start"),(0,l.kt)("p",null,"Runs the ",(0,l.kt)("inlineCode",{parentName:"p"},"Tolgee.run")," method from ",(0,l.kt)("inlineCode",{parentName:"p"},"@tolgee/core")," library."),(0,l.kt)("h3",{id:"onlangchange"},"onLangChange"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"EventEmitter<never>")," emitting every time language is changed."),(0,l.kt)("h3",{id:"ontranslationchange"},"onTranslationChange"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"EventEmmitter<TranslationData>")," emitting when translation is changed."),(0,l.kt)("h4",{id:"type-translationdata"},"type ",(0,l.kt)("inlineCode",{parentName:"h4"},"TranslationData")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"{\n    key: string; // the key which was changed\n    translations: { // new translations for languages\n        [key: string]: string;\n    };\n}\n")),(0,l.kt)("p",null,"e.g."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'{\n    key: "i_am_a_key"\n    translations: {\n      "en": "English translation",\n      "de": "German translation"\n    };\n}\n')),(0,l.kt)("h3",{id:"tcomponent"},"TComponent"),(0,l.kt)("p",null,"Component with ",(0,l.kt)("inlineCode",{parentName:"p"},"t")," attribute selector. Replaces the content of the element with the translated value."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Input ",(0,l.kt)("inlineCode",{parentName:"li"},"key")," - Key to translate"),(0,l.kt)("li",{parentName:"ul"},"Input ",(0,l.kt)("inlineCode",{parentName:"li"},"params")," - Object of parameters to interpolate"),(0,l.kt)("li",{parentName:"ul"},"Input ",(0,l.kt)("inlineCode",{parentName:"li"},"default")," - Default value")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},"<div t key=\"this_is_a_key_with_params\" [params]=\"{key: 'value', key2: 'value2'}\"></div>\n")),(0,l.kt)("h3",{id:"translate-pipe"},(0,l.kt)("inlineCode",{parentName:"h3"},"translate")," pipe"),(0,l.kt)("p",null,"Translates a key with specific parameters or default value. The pipe is wrapping strings\nin development mode to enable in-context editing."),(0,l.kt)("p",null,"Syntax:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"key to translate | translate[:default value]\n// or\nkey to translate | translate[:parameters]\n// or\nkey to translate | translate[:defafault value][:parameters]\n")),(0,l.kt)("p",null,"Example usages:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-angular2html"},"{{ 'this_key_does_not_exist' | translate:'This is default'}}\n{{ 'this_is_a_key_with_params' | translate:{key: 'value', key2: 'value2'} }}\n{{ 'this_is_a_key_with_params' | translate:\"Default value\":{key: 'value', key2: 'value2'} }}\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Default value of type ",(0,l.kt)("inlineCode",{parentName:"li"},"string")),(0,l.kt)("li",{parentName:"ul"},"Parameters are ",(0,l.kt)("inlineCode",{parentName:"li"},"Record<string, any>"))),(0,l.kt)("h3",{id:"stranslate-pipe"},(0,l.kt)("inlineCode",{parentName:"h3"},"stranslate")," pipe"),(0,l.kt)("p",null,"Translates a key with specific parameters or default value. It provides the same API as the ",(0,l.kt)("a",{parentName:"p",href:"#translate-pipe"},(0,l.kt)("inlineCode",{parentName:"a"},"translate")),"\npipe, but it doesn't wrap the key in development mode, so in-context editing is not available."),(0,l.kt)("p",null,"Syntax:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"key to stranslate | stranslate[:default value]\n// or\nkey to stranslate | stranslate[:parameters]\n// or\nkey to stranslate | stranslate[:defafault value][:parameters]\n")),(0,l.kt)("p",null,"Example usages:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-angular2html"},"{{ 'this_key_does_not_exist' | stranslate:'This is default'}}\n{{ 'this_is_a_key_with_params' | stranslate:{key: 'value', key2: 'value2'} }}\n{{ 'this_is_a_key_with_params' | stranslate:\"Default value\":{key: 'value', key2: 'value2'} }}\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Default value of type ",(0,l.kt)("inlineCode",{parentName:"li"},"string")),(0,l.kt)("li",{parentName:"ul"},"Parameters are ",(0,l.kt)("inlineCode",{parentName:"li"},"Record<string, any>"))))}d.isMDXComponent=!0}}]);