"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[6125],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(n),m=r,g=c["".concat(p,".").concat(m)]||c[m]||d[m]||o;return n?a.createElement(g,i(i({ref:t},u),{},{components:n})):a.createElement(g,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},59884:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const o={id:"api",title:"API",sidebar_label:"API",slug:"/web/using_with_react/api"},i=void 0,l={unversionedId:"web/using_with_react/api",id:"web/using_with_react/api",title:"API",description:"TolgeeProvider",source:"@site/docs/web/using_with_react/api.mdx",sourceDirName:"web/using_with_react",slug:"/web/using_with_react/api",permalink:"/docs/web/using_with_react/api",draft:!1,editUrl:"https://github.com/tolgee/documentation/tree/main/docs/web/using_with_react/api.mdx",tags:[],version:"current",frontMatter:{id:"api",title:"API",sidebar_label:"API",slug:"/web/using_with_react/api"},sidebar:"someSidebar",previous:{title:"Using with Gatsby",permalink:"/docs/web/using_with_react/ssr/using_with_gatsby"},next:{title:"Installation",permalink:"/docs/web/using_with_angular/installation"}},p={},s=[{value:"TolgeeProvider",id:"tolgeeprovider",level:2},{value:"Prop <code>loadingFallback?</code>",id:"prop-loadingfallback",level:4},{value:"Config as props",id:"config-as-props",level:4},{value:"T component",id:"t-component",level:2},{value:"Prop <code>keyName?</code>",id:"prop-keyname",level:4},{value:"Prop <code>parameters?</code>",id:"prop-parameters",level:4},{value:"Prop <code>noWrap?</code>",id:"prop-nowrap",level:4},{value:"Children <code>defaultValue?</code> | <code>keyName?</code>",id:"children-defaultvalue--keyname",level:4},{value:"Hook <code>useTranslate</code>",id:"hook-usetranslate",level:2},{value:"Function <code>t</code>",id:"function-t",level:3},{value:"Parameter <code>key</code>",id:"parameter-key",level:4},{value:"Parameter <code>parameters?</code>",id:"parameter-parameters",level:4},{value:"Parameter <code>noWrap?</code>",id:"parameter-nowrap",level:4},{value:"Parameter <code>defaultValue?</code>",id:"parameter-defaultvalue",level:4},{value:"Hook <code>useCurrentLanguage</code>",id:"hook-usecurrentlanguage",level:2},{value:"Hook <code>useSetLanguage</code>",id:"hook-usesetlanguage",level:2}],u={toc:s};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"tolgeeprovider"},"TolgeeProvider"),(0,r.kt)("p",null,"Provides Tolgee context. Use in root of your application."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { TolgeeProvider } from '@tolgee/react';\n\n<TolgeeProvider apiUrl={...} apiKey={...}>\n  <App />\n</TolgeeProvider>\n")),(0,r.kt)("h4",{id:"prop-loadingfallback"},"Prop ",(0,r.kt)("inlineCode",{parentName:"h4"},"loadingFallback?")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"React.Node")," - it is rendered when Tolgee is loading translations instead of provided content.\nYou can pass custom loading element when using Vue with JSX."),(0,r.kt)("h4",{id:"config-as-props"},"Config as props"),(0,r.kt)("p",null,"All keys from ",(0,r.kt)("a",{parentName:"p",href:"../configuration"},(0,r.kt)("inlineCode",{parentName:"a"},"TolgeeConfiguration"))," object can be used as props."),(0,r.kt)("h2",{id:"t-component"},"T component"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { T } from '@tolgee/react';\n\n<T keyName=\"...\" parameters={{ param: '...' }}>default value ...</T>\n")),(0,r.kt)("h4",{id:"prop-keyname"},"Prop ",(0,r.kt)("inlineCode",{parentName:"h4"},"keyName?")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"String")," - translation key."),(0,r.kt)("h4",{id:"prop-parameters"},"Prop ",(0,r.kt)("inlineCode",{parentName:"h4"},"parameters?")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Record<string, string | number | ReactElement | (val) => ReactNode>")," - variable parameters, which can be used in translation value\n(read more about ",(0,r.kt)("a",{parentName:"p",href:"../../icu_message_format"},"ICU message format"),")."),(0,r.kt)("h4",{id:"prop-nowrap"},"Prop ",(0,r.kt)("inlineCode",{parentName:"h4"},"noWrap?")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Boolean")," (default: ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"false")," - in development mode translation will be ",(0,r.kt)("a",{parentName:"li",href:"../wrapping"},"wrapped")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"true")," - use when wrapping in dev mode causes problems, in this case in-context translation won't work")),(0,r.kt)("h4",{id:"children-defaultvalue--keyname"},"Children ",(0,r.kt)("inlineCode",{parentName:"h4"},"defaultValue?")," | ",(0,r.kt)("inlineCode",{parentName:"h4"},"keyName?")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"String")," - If ",(0,r.kt)("inlineCode",{parentName:"p"},"keyName")," property is not defined, child is taken as ",(0,r.kt)("inlineCode",{parentName:"p"},"keyName"),". I it is present child can be used as ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultValue"),"."),(0,r.kt)("h2",{id:"hook-usetranslate"},"Hook ",(0,r.kt)("inlineCode",{parentName:"h2"},"useTranslate")),(0,r.kt)("p",null,"Use this hook to get ",(0,r.kt)("inlineCode",{parentName:"p"},"t")," function, which can be used for imperative translating."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { useTranslate } from '@tolgee/react'\n\nconst Component = () => {\n  const t = useTranslate()\n\n  return <div title={t('title_key')} />\n}\n")),(0,r.kt)("h3",{id:"function-t"},"Function ",(0,r.kt)("inlineCode",{parentName:"h3"},"t")),(0,r.kt)("p",null,"Returns requested translation and also subscribes component to translation/language changes,\nso component will be re-rendered every time translation changes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"function t(\n  key: string, \n  parameters?: Record<string, string | number | ReactElement | (val) => ReactNode>,\n  noWrap?: boolean,\n  defaultValue?: string\n): string\n\n// or with options object\nfunction t(options: {\n  key: string;\n  parameters?: Record<string, string | number | ReactElement | (val) => ReactNode>;\n  noWrap?: boolean;\n  defaultValue?: string;\n}): string\n")),(0,r.kt)("h4",{id:"parameter-key"},"Parameter ",(0,r.kt)("inlineCode",{parentName:"h4"},"key")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"String")," - translation key."),(0,r.kt)("h4",{id:"parameter-parameters"},"Parameter ",(0,r.kt)("inlineCode",{parentName:"h4"},"parameters?")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Record<string, string | number | ReactElement | (val) => ReactNode>")," - variable parameters, which can be used in translation value\n(read more about ",(0,r.kt)("a",{parentName:"p",href:"../../icu_message_format"},"ICU message format"),")."),(0,r.kt)("h4",{id:"parameter-nowrap"},"Parameter ",(0,r.kt)("inlineCode",{parentName:"h4"},"noWrap?")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Boolean")," (default: ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"false")," - in development mode translation will be ",(0,r.kt)("a",{parentName:"li",href:"../wrapping"},"wrapped")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"true")," - use when wrapping in dev mode causes problems, or you pass write it outside the DOM\n(for example ",(0,r.kt)("inlineCode",{parentName:"li"},"document.title"),"), in this case in-context translation won't work")),(0,r.kt)("h4",{id:"parameter-defaultvalue"},"Parameter ",(0,r.kt)("inlineCode",{parentName:"h4"},"defaultValue?")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"String")," - It will be rendered if there is no translation for this key (in selected language nor base language).\nIf you won't provide this value, ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," will be rendered instead."),(0,r.kt)("h2",{id:"hook-usecurrentlanguage"},"Hook ",(0,r.kt)("inlineCode",{parentName:"h2"},"useCurrentLanguage")),(0,r.kt)("p",null,"Returns function ",(0,r.kt)("inlineCode",{parentName:"p"},"getLanguage(): string"),", which returns current language key."),(0,r.kt)("h2",{id:"hook-usesetlanguage"},"Hook ",(0,r.kt)("inlineCode",{parentName:"h2"},"useSetLanguage")),(0,r.kt)("p",null,"Returns function ",(0,r.kt)("inlineCode",{parentName:"p"},"setLanguage(lang: string)"),", which changes language in Tolgee context."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="useCurrentLanguage & useSetLanguage"',title:'"useCurrentLanguage',"&":!0,'useSetLanguage"':!0},"import { useSetLanguage, useCurrentLanguage } from '@tolgee/react';\n\nconst Component = () => {\n  const setLanguage = useSetLanguage();\n  const getLanguage = useCurrentLanguage();\n\n  return (\n    <select\n      onChange={(e) => setLanguage(e.target.value)}\n      value={getLanguage()}\n    >\n      ...      \n    </select>\n  );\n}\n")))}d.isMDXComponent=!0}}]);