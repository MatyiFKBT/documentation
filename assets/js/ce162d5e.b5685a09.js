"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[8539],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(g,i(i({ref:t},c),{},{components:n})):a.createElement(g,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},11522:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={slug:"manage-user-avatar",title:"All you need to know to deal with user avatars \ud83d\udc64 in React",description:"Learn how to generate user avatar, select avatar from file and crop selected avatar using libraries.",authors:["jcizmar"],image:"/img/blog/avatar/ogImage.png",tags:["react","avatar","javascript","typescript"]},i=void 0,l={permalink:"/blog/manage-user-avatar",editUrl:"https://github.com/tolgee/documentation/tree/main/blog/2022-02-03-user-avatar.md",source:"@site/blog/2022-02-03-user-avatar.md",title:"All you need to know to deal with user avatars \ud83d\udc64 in React",description:"Learn how to generate user avatar, select avatar from file and crop selected avatar using libraries.",date:"2022-02-03T00:00:00.000Z",formattedDate:"February 3, 2022",tags:[{label:"react",permalink:"/blog/tags/react"},{label:"avatar",permalink:"/blog/tags/avatar"},{label:"javascript",permalink:"/blog/tags/javascript"},{label:"typescript",permalink:"/blog/tags/typescript"}],readingTime:5.83,hasTruncateMarker:!0,authors:[{name:"Jan Cizmar \ud83d\ude0e",title:"Founder & Full-stack Architect",url:"https://github.com/JanCizmar",imageURL:"https://avatars.githubusercontent.com/u/18496315?v=4",key:"jcizmar"}],frontMatter:{slug:"manage-user-avatar",title:"All you need to know to deal with user avatars \ud83d\udc64 in React",description:"Learn how to generate user avatar, select avatar from file and crop selected avatar using libraries.",authors:["jcizmar"],image:"/img/blog/avatar/ogImage.png",tags:["react","avatar","javascript","typescript"]},prevItem:{title:"Updating Roadmap",permalink:"/blog/updating-road-map"},nextItem:{title:"Super fast React Localization \ud83c\udf0d (i18n) with i18next and Tolgee \ud83d\udc01",permalink:"/blog/super-fast-react-localization-i18n-with-i18next-and-tolgee"}},s={authorsImageUrls:[void 0]},p=[{value:"Generating default avatar",id:"generating-default-avatar",level:2},{value:"Letting user select an avatar",id:"letting-user-select-an-avatar",level:2},{value:"Cropping the image",id:"cropping-the-image",level:2},{value:"Making the selection rounded",id:"making-the-selection-rounded",level:2},{value:"TL;DR",id:"tldr",level:2}],c={toc:p};function u(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Most of the information systems using user authentication also work with some kind of avatars - images enabling other\nusers to see who commented, posted or made anything else in the system.\nWhen we want to be able to show user avatars, we need to enable users to upload their avatar or generate some default.\nIn this article I am going to show you how to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"generate user avatar by their unique ID using ",(0,r.kt)("inlineCode",{parentName:"li"},"jdenticon")),(0,r.kt)("li",{parentName:"ul"},"select avatar from file"),(0,r.kt)("li",{parentName:"ul"},"crop selected avatar using ",(0,r.kt)("inlineCode",{parentName:"li"},"cropper.js")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"react-cropper")," libraries")),(0,r.kt)("h2",{id:"generating-default-avatar"},"Generating default avatar"),(0,r.kt)("p",null,"When the user hasn't selected their own avatar, we have few options what to show instead of it.\nWe can show nothing, use some placeholder image \ud83d\udc64 or ",(0,r.kt)("strong",{parentName:"p"},"generate")," some pretty cool image. \ud83d\ude0e"),(0,r.kt)("p",null,"There are multiple avatar generators in npm. I chose ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/jdenticon"},(0,r.kt)("inlineCode",{parentName:"a"},"jdenticon"))," because I like the images it produces."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Identicon Example 1",src:n(99588).Z,width:"287",height:"409"})),(0,r.kt)("p",null,"You can also find this ",(0,r.kt)("a",{parentName:"p",href:"https://jdenticon.com/icon-designer.html"},"nice icon designer")," in their docs, so you can\ncustomize the output. But I am going to stick with defaults."),(0,r.kt)("p",null,"So let's see how to use the library to generate the image."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { ComponentProps, FC, useState } from 'react';\n\nexport const AutoAvatar: FC<\n  ComponentProps<'img'> & { userId: number; size: number }\n  > = ({ userId, size, ...imgProps }) => {\n  const [base64, setBase64] = useState(undefined as string | undefined);\n\n  // using dynamic import to save some loading\n  import('jdenticon').then(({ toSvg }) => {\n    const svgString = toSvg(userId, size);\n    const base64 = Buffer.from(svgString).toString('base64');\n    setBase64(base64);\n  });\n\n  return base64 ? (\n    <div style={{ backgroundColor: 'rgb(225,225,225)', display: 'flex' }}>\n      <img\n        {...imgProps}\n        src={`data:image/svg+xml;base64,${base64}`}\n        alt={'User Avatar'}\n      />\n    </div>\n  ) : (\n    <div style={{ width: size, height: size, display: 'inline-block' }}>\n      Loading...\n    </div>\n  );\n};\n")),(0,r.kt)("p",null,"What I am doing here is loading the ",(0,r.kt)("inlineCode",{parentName:"p"},"jdenticon")," library using dynamic import. The library has approx. 45 kb, so it is good\nidea to let webpack download it dynamically just when it's needed."),(0,r.kt)("p",null,"When it's loaded, I let the library produce svg by user ID. The library works similarly as good hash function so\nfor near values it produces completely different results."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Identicon Example 1",src:n(16110).Z,width:"683",height:"260"})),(0,r.kt)("p",null,"If you don't trust me, you can play with that ",(0,r.kt)("a",{parentName:"p",href:"https://stackblitz.com/edit/web-platform-er334x?file=index.html"},"here"),"."),(0,r.kt)("p",null,"When it's generated I am converting the result to ",(0,r.kt)("inlineCode",{parentName:"p"},"base64")," to use it in ",(0,r.kt)("inlineCode",{parentName:"p"},"img src")," attribute."),(0,r.kt)("p",null,"That's it. Avatar generated! \ud83e\udd73"),(0,r.kt)("h2",{id:"letting-user-select-an-avatar"},"Letting user select an avatar"),(0,r.kt)("p",null,"To let user select an avatar, we can simply use input element with ",(0,r.kt)("inlineCode",{parentName:"p"},"file")," type attribute."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<input\n  type="file"\n  accept="image/png,image/jpeg,image/gif"\n/>\n')),(0,r.kt)("p",null,"But this input is pretty ugly. So I am going to hide it and provide my own cool button instead of this. Then I can trigger\nclick on this input to open the system file selection dialog."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import React, {createRef} from "react";\n\nexport const ImageSelect = () => {\n  const fileRef = createRef<HTMLInputElement>();\n\n  const onFileInputChange: React.ChangeEventHandler<HTMLInputElement> = (e) => {\n    console.log(e.target?.files?.[0]);\n  }\n\n  return (\n    <>\n      <input\n        type="file"\n        style={{display: \'none\'}}\n        ref={fileRef}\n        onChange={onFileInputChange}\n        accept="image/png,image/jpeg,image/gif"\n      />\n      <button\n        onClick={() => fileRef.current?.click()}\n      >Cool Button\n      </button>\n    </>\n  )\n}\n')),(0,r.kt)("p",null,"Like this, we can use any event to open the file selection. When the user selects some file, it is printed to the console.\nNow we would be prepared to upload the file to backend. But that would be lame. Let's also crop the image! \ud83c\udf88"),(0,r.kt)("h2",{id:"cropping-the-image"},"Cropping the image"),(0,r.kt)("p",null,"To provide a bit more comfort to our users it would be nice to enable them to crop the image before they actually upload\nit. This can be done using ",(0,r.kt)("a",{parentName:"p",href:"https://fengyuanchen.github.io/cropperjs/"},"cropper.js")," and its\nReact wrapper ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/react-cropper"},(0,r.kt)("inlineCode",{parentName:"a"},"react-cropper")),"."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Cropping",src:n(83396).Z,width:"398",height:"350"})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import React, {createRef} from "react";\nimport {Cropper, ReactCropperElement} from "react-cropper";\nimport \'cropperjs/dist/cropper.css\';\n\nexport const ImageCrop = () => {\n  const cropperRef = createRef<ReactCropperElement>();\n\n  return (\n    <Cropper\n      src="<the iamge src>"\n      style={{height: 400, width: 400}}\n      autoCropArea={1}\n      aspectRatio={1}\n      viewMode={3}\n      guides={false}\n      ref={cropperRef}\n    />\n  )\n}\n')),(0,r.kt)("p",null,"What does the configuration do?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"autoCropArea=1 - selects whole image by default"),(0,r.kt)("li",{parentName:"ul"},"aspectRatio=1 - makes it 1:1, so it is square"),(0,r.kt)("li",{parentName:"ul"},"viewMode=3 - makes the image to cover cropper size and disables selecting empty areas by moving out from canvas"),(0,r.kt)("li",{parentName:"ul"},"guides=false - removes tiny lines, which I found unnecessary for croping avatars")),(0,r.kt)("p",null,"So now it would be nice to get the actual cropped image. We can do it this way:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import React, {createRef, useState} from "react";\nimport {Cropper, ReactCropperElement} from "react-cropper";\nimport \'cropperjs/dist/cropper.css\';\n\nexport const ImageCrop = () => {\n  const cropperRef = createRef<ReactCropperElement>();\n  const [cropped, setCropped] = useState(null as string | null);\n\n  const onSaveClick = () => {\n    const imageElement: any = cropperRef?.current;\n    const cropper: any = imageElement?.cropper;\n    setCropped(cropper.getCroppedCanvas().toDataURL())\n  }\n\n  return (\n    <>\n      <Cropper\n        src={"https://picsum.photos/500/300"}\n        style={{height: 400, width: 400}}\n        autoCropArea={1}\n        aspectRatio={1}\n        viewMode={3}\n        guides={false}\n        ref={cropperRef}\n      />\n      <button onClick={onSaveClick}>Crop</button>\n      {cropped &&\n        <img src={cropped} alt={"It\'s cropped"}/>\n      }\n    </>\n  )\n}\n')),(0,r.kt)("p",null,"If we would like to get the image for uploading, it would be better to use"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"cropper.getCroppedCanvas().toBlog()\n")),(0,r.kt)("p",null,"Which provides a blob which we can use to create a file to upload."),(0,r.kt)("p",null,"Depends, for what we like to use the result. If we would like to upload it, ",(0,r.kt)("inlineCode",{parentName:"p"},"blob")," is what we are looking for. To just\nshow the image ",(0,r.kt)("inlineCode",{parentName:"p"},"dataUrl")," is our choice."),(0,r.kt)("p",null,"Cool! So now we can also crop the image. Now, let's combine it all together!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import React, {createRef, useState} from 'react';\nimport './App.css';\nimport {Cropper, ReactCropperElement} from \"react-cropper\";\nimport 'cropperjs/dist/cropper.css';\nimport './roundedCropper.css';\n\n// this transforms file to base64\nconst file2Base64 = (file: File): Promise<string> => {\n  return new Promise<string>((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result?.toString() || '');\n    reader.onerror = (error) => reject(error);\n  });\n};\n\nconst App = () => {\n  // ref of the file input\n  const fileRef = createRef<HTMLInputElement>();\n\n  // the selected image\n  const [uploaded, setUploaded] = useState(null as string | null);\n\n  // the resulting cropped image\n  const [cropped, setCropped] = useState(null as string | null);\n\n  // the reference of cropper element\n  const cropperRef = createRef<ReactCropperElement>();\n\n  const onFileInputChange: React.ChangeEventHandler<HTMLInputElement> = (e) => {\n    const file = e.target?.files?.[0];\n    if (file) {\n      file2Base64(file).then((base64) => {\n        setUploaded(base64);\n      });\n    }\n  }\n\n  const onCrop = () => {\n    const imageElement: any = cropperRef?.current;\n    const cropper: any = imageElement?.cropper;\n    setCropped(cropper.getCroppedCanvas().toDataURL())\n  }\n\n  return (\n    <>\n      <div className=\"App\">\n        {\n          uploaded ?\n            <div>\n              <Cropper\n                src={uploaded}\n                style={{height: 400, width: 400}}\n                autoCropArea={1}\n                aspectRatio={1}\n                viewMode={3}\n                guides={false}\n                ref={cropperRef}\n              />\n              <button onClick={onCrop}>Crop</button>\n              {cropped && <img src={cropped} alt=\"Cropped!\"/>}\n            </div>\n            :\n            <>\n              <input\n                type=\"file\"\n                style={{display: 'none'}}\n                ref={fileRef}\n                onChange={onFileInputChange}\n                accept=\"image/png,image/jpeg,image/gif\"\n              />\n              <button\n                onClick={() => fileRef.current?.click()}\n              >Upload something!\n              </button>\n            </>}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n")),(0,r.kt)("p",null,"When user selects an image, the cropper component is rendered. When user hits the crop button, the resulting cropped image\nis shown. That's all. Easy-peasy."),(0,r.kt)("h2",{id:"making-the-selection-rounded"},"Making the selection rounded"),(0,r.kt)("p",null,"If you would like to use the avatars rounded, you would probably like to make also the selection rounded."),(0,r.kt)("p",null,"To do so, we have to style the cropper elements."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},".cropper-crop-box, .cropper-view-box {\n    border-radius: 50%;\n}\n")),(0,r.kt)("h2",{id:"tldr"},"TL;DR"),(0,r.kt)("p",null,"In this article I explained how to generate default avatar using ",(0,r.kt)("inlineCode",{parentName:"p"},"jdenticon")," library and how to select an image file and\nalso, how to enable user to crop it using ",(0,r.kt)("inlineCode",{parentName:"p"},"react-croper")," library."))}u.isMDXComponent=!0},83396:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/crop-0da4bd0652876a93ea75e95eacf9d401.gif"},16110:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/generatedAvatars-78bf4bee1c625cf0d11be99879378275.png"},99588:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/jdenticon-24dd72edf14c3f1d358e459a85bb5846.png"}}]);