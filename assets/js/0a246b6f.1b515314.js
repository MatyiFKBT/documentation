"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[941],{3905:(e,o,n)=>{n.d(o,{Zo:()=>u,kt:()=>m});var r=n(67294);function t(e,o,n){return o in e?Object.defineProperty(e,o,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[o]=n,e}function a(e,o){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);o&&(r=r.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var o=1;o<arguments.length;o++){var n=null!=arguments[o]?arguments[o]:{};o%2?a(Object(n),!0).forEach((function(o){t(e,o,n[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(n,o))}))}return e}function p(e,o){if(null==e)return{};var n,r,t=function(e,o){if(null==e)return{};var n,r,t={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],o.indexOf(n)>=0||(t[n]=e[n]);return t}(e,o);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],o.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var l=r.createContext({}),s=function(e){var o=r.useContext(l),n=o;return e&&(n="function"==typeof e?e(o):i(i({},o),e)),n},u=function(e){var o=s(e.components);return r.createElement(l.Provider,{value:o},e.children)},d={inlineCode:"code",wrapper:function(e){var o=e.children;return r.createElement(r.Fragment,{},o)}},c=r.forwardRef((function(e,o){var n=e.components,t=e.mdxType,a=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),c=s(n),m=t,g=c["".concat(l,".").concat(m)]||c[m]||d[m]||a;return n?r.createElement(g,i(i({ref:o},u),{},{components:n})):r.createElement(g,i({ref:o},u))}));function m(e,o){var n=arguments,t=o&&o.mdxType;if("string"==typeof e||t){var a=n.length,i=new Array(a);i[0]=c;var p={};for(var l in o)hasOwnProperty.call(o,l)&&(p[l]=o[l]);p.originalType=e,p.mdxType="string"==typeof e?e:t,i[1]=p;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},84646:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>p,toc:()=>s});var r=n(87462),t=(n(67294),n(3905));const a={id:"angular_preparing_for_production",title:"Preparing for production (Angular)",sidebar_label:"Preparing for production",slug:"/web/using_with_angular/angular_preparing_for_production"},i=void 0,p={unversionedId:"web/using_with_angular/angular_preparing_for_production",id:"web/using_with_angular/angular_preparing_for_production",title:"Preparing for production (Angular)",description:"In production mode you should never use localization data from Tolgee REST API and you should never leak your API key.",source:"@site/docs/web/using_with_angular/preparing_for_production.mdx",sourceDirName:"web/using_with_angular",slug:"/web/using_with_angular/angular_preparing_for_production",permalink:"/docs/web/using_with_angular/angular_preparing_for_production",draft:!1,editUrl:"https://github.com/tolgee/documentation/tree/main/docs/web/using_with_angular/preparing_for_production.mdx",tags:[],version:"current",frontMatter:{id:"angular_preparing_for_production",title:"Preparing for production (Angular)",sidebar_label:"Preparing for production",slug:"/web/using_with_angular/angular_preparing_for_production"},sidebar:"someSidebar",previous:{title:"Switching languages",permalink:"/docs/web/using_with_angular/switching_languages"},next:{title:"API",permalink:"/docs/web/using_with_angular/api"}},l={},s=[{value:"Providing data using dynamic import (recommended)",id:"providing-data-using-dynamic-import-recommended",level:2},{value:"Using imported object",id:"using-imported-object",level:2},{value:"Providing data using filesUrlPrefix option (default)",id:"providing-data-using-filesurlprefix-option-default",level:2}],u={toc:s};function d(e){let{components:o,...n}=e;return(0,t.kt)("wrapper",(0,r.Z)({},u,n,{components:o,mdxType:"MDXLayout"}),(0,t.kt)("p",null,"In production mode you should never use localization data from Tolgee REST API and you should never leak your API key.\nYou should use data exported from Tolgee platform.\nTo get exported localization files, see ",(0,t.kt)("a",{parentName:"p",href:"/docs/platform/exporting_translations"},"exporting translations"),"."),(0,t.kt)("p",null,"There are multiple options to provide static localization data for production builds. Providing a URL prefix where Tolgee can\nfetch the data from or providing imported data as reference or provider in ",(0,t.kt)("inlineCode",{parentName:"p"},"NgxTolgeeModule.forRoot(...)")," config property."),(0,t.kt)("h2",{id:"providing-data-using-dynamic-import-recommended"},"Providing data using dynamic import (recommended)"),(0,t.kt)("p",null,"To provide your localization data using dynamic import you will need to add providers for every supported language\nto staticData configuration property."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'jsx title="src/app/app.module.ts"',jsx:!0,title:'"src/app/app.module.ts"'},'import { BrowserModule } from "@angular/platform-browser";\nimport { NgModule } from "@angular/core";\n\nimport { AppComponent } from "./app.component";\nimport { NgxTolgeeModule } from "@tolgee/ngx";\nimport { environment } from "../environments/environment";\nimport { FormsModule } from "@angular/forms";\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    NgxTolgeeModule.forRoot({\n      staticData: {\n        en: () => import("../assets/i18n/en.json"),\n        cs: () => import("../assets/i18n/cs.json"),\n      },\n    }),\n    FormsModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n\n')),(0,t.kt)("p",null,"Using this approach data will be fetched just when it's needed, so you will save some network traffic."),(0,t.kt)("h2",{id:"using-imported-object"},"Using imported object"),(0,t.kt)("p",null,"This approach just provides localization data as imported object."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'jsx title="src/app/app.module.ts"',jsx:!0,title:'"src/app/app.module.ts"'},'import { BrowserModule } from "@angular/platform-browser";\nimport { NgModule } from "@angular/core";\n\nimport { AppComponent } from "./app.component";\nimport { NgxTolgeeModule } from "@tolgee/ngx";\nimport { environment } from "../environments/environment";\nimport { FormsModule } from "@angular/forms";\nimport * as localeCs from "../assets/i18n/cs.json";\nimport * as localeEn from "../assets/i18n/en.json";\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    NgxTolgeeModule.forRoot({\n      staticData: {\n        en: localeEn,\n        cs: localeCs,\n      },\n    }),\n    FormsModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n')),(0,t.kt)("p",null,"This way, all localization data are bundled with your application, so it will be downloaded with your application code."),(0,t.kt)("h2",{id:"providing-data-using-filesurlprefix-option-default"},"Providing data using filesUrlPrefix option (default)"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'jsx title="src/app/app.module.ts"',jsx:!0,title:'"src/app/app.module.ts"'},'import { BrowserModule } from "@angular/platform-browser";\nimport { NgModule } from "@angular/core";\n\nimport { AppComponent } from "./app.component";\nimport { NgxTolgeeModule } from "@tolgee/ngx";\nimport { environment } from "../environments/environment";\nimport { FormsModule } from "@angular/forms";\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    NgxTolgeeModule.forRoot({\n      // this value is default, so we could have omitted this property\n      filesUrlPrefix: "assets/i18n/",\n    }),\n    FormsModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n\n')),(0,t.kt)("p",null,"This option tells Tolgee, that localization data (en.json, cs.json) can be found on ",(0,t.kt)("inlineCode",{parentName:"p"},"https://yoururl.com/assets/i18n/"),",\nso it will be fetched with every page load."))}d.isMDXComponent=!0}}]);