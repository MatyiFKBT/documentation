"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[8380],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(r),f=o,g=d["".concat(p,".").concat(f)]||d[f]||u[f]||a;return r?n.createElement(g,i(i({ref:t},c),{},{components:r})):n.createElement(g,i({ref:t},c))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},10120:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var n=r(87462),o=(r(67294),r(3905));const a={id:"preparing_for_production",title:"Preparing for production",sidebar_label:"Preparing for production",slug:"/web/get_started/preparing_for_production"},i=void 0,l={unversionedId:"web/get_started/preparing_for_production",id:"web/get_started/preparing_for_production",title:"Preparing for production",description:"In production environment, you should never leak your API key. In-context localization must be available only for your translators,",source:"@site/docs/web/get_started/preparing_for_production.mdx",sourceDirName:"web/get_started",slug:"/web/get_started/preparing_for_production",permalink:"/docs/web/get_started/preparing_for_production",draft:!1,editUrl:"https://github.com/tolgee/documentation/tree/main/docs/web/get_started/preparing_for_production.mdx",tags:[],version:"current",frontMatter:{id:"preparing_for_production",title:"Preparing for production",sidebar_label:"Preparing for production",slug:"/web/get_started/preparing_for_production"},sidebar:"someSidebar",previous:{title:"Hello world",permalink:"/docs/web/get_started/hello_world"},next:{title:"Adding loading overlay",permalink:"/docs/web/get_started/adding_loading_overlay"}},p={},s=[],c={toc:s};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In production environment, you should never leak your API key. In-context localization must be available only for your translators,\ndevelopers or other staff but not for the outside world."),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"Never leak your API key! We strongly recommend against adding API key into git repository.")),(0,o.kt)("p",null,"To prepare your application for production you will need to let Tolgee use exported .json files.\nYou can get these files by exporting your translations from web application.\nSee ",(0,o.kt)("a",{parentName:"p",href:"/docs/platform/exporting_translations"},"exporting translations"),"."),(0,o.kt)("p",null,"To make Tolgee look for json files just remove ",(0,o.kt)("strong",{parentName:"p"},"apiKey")," property from configuration object. If we continue with\nour ",(0,o.kt)("a",{parentName:"p",href:"hello_world"},"hello world example"),", production configuration object will look like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n    inputPrefix: "{{",\n    inputSuffix: "}}",\n    watch: true\n}\n')),(0,o.kt)("p",null,"In production mode, ",(0,o.kt)("inlineCode",{parentName:"p"},"apiUrl")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"ui")," properties are useless as we don't allow anybody to change our translations in\nthe app accessible from the outside world. We can also remove the ",(0,o.kt)("inlineCode",{parentName:"p"},"script")," tag importing tolgee UI."),(0,o.kt)("p",null,"Next, we should add exported translations into some public path so Tolgee can reach them.\nBy default, Tolgee looks for the translation files in ",(0,o.kt)("inlineCode",{parentName:"p"},"/i18n/[lang].json"),".\nTo change this, you may provide ",(0,o.kt)("inlineCode",{parentName:"p"},"filesUrlPrefix")," property to configuration object but for out example we can stick with\ndefault."),(0,o.kt)("p",null,"Let's take the exported json files and put them into the i18n directory placed as a sibling of our html file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\u251c\u2500\u2500 i18n\n\u2502\xa0\xa0 \u251c\u2500\u2500 cs.json\n\u2502\xa0\xa0 \u2514\u2500\u2500 en.json\n\u251c\u2500\u2500 index.html\n")),(0,o.kt)("p",null,"That's it! Our app is ready for production. Here is the final HTML page:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <title>hello world</title>\n</head>\n<body>\n    <h1>{{hello_world}}</h1>\n</body>\n<script src="https://unpkg.com/@tolgee/core/dist/tolgee.umd.min.js"><\/script>\n<script>\nconst { Tolgee, IcuFormatter } = window["@tolgee/core"]\nconst tg = Tolgee.use(IcuFormatter).init({\n    inputPrefix: "{{",\n    inputSuffix: "}}",\n    watch: true,\n});\ntg.run();\n<\/script>\n</html>\n')),(0,o.kt)("p",null,"Now you maybe wish to ",(0,o.kt)("a",{parentName:"p",href:"/docs/web/get_started/adding_loading_overlay"},"add loading overlay")," to make untranslated texts invisible."))}u.isMDXComponent=!0}}]);