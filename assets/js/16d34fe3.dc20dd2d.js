"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[5078],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(t),g=a,h=d["".concat(l,".").concat(g)]||d[g]||p[g]||o;return t?r.createElement(h,i(i({ref:n},u),{},{components:t})):r.createElement(h,i({ref:n},u))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},10599:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=t(87462),a=(t(67294),t(3905));const o={id:"ssr",title:"SSR support",sidebar_label:"SSR support",slug:"/web/using_with_react/ssr/ssr"},i=void 0,s={unversionedId:"web/using_with_react/ssr/ssr",id:"web/using_with_react/ssr/ssr",title:"SSR support",description:"To use Tolgee with your SSR framework such as Next or Gatsby, you can provide localization data imported as object",source:"@site/docs/web/using_with_react/ssr/ssr.mdx",sourceDirName:"web/using_with_react/ssr",slug:"/web/using_with_react/ssr/ssr",permalink:"/docs/web/using_with_react/ssr/ssr",draft:!1,editUrl:"https://github.com/tolgee/documentation/tree/main/docs/web/using_with_react/ssr/ssr.mdx",tags:[],version:"current",frontMatter:{id:"ssr",title:"SSR support",sidebar_label:"SSR support",slug:"/web/using_with_react/ssr/ssr"},sidebar:"someSidebar",previous:{title:"Preparing for production",permalink:"/docs/web/using_with_react/preparing_for_production"},next:{title:"Using with Next.js",permalink:"/docs/web/using_with_react/ssr/using_with_next"}},l={},c=[{value:"Language changing",id:"language-changing",level:2}],u={toc:c};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"To use Tolgee with your SSR framework such as Next or Gatsby, you can provide localization data imported as object\nusing staticData property of TolgeeProvider component, this data will be loaded directly into cache and immediately\navailable with first render for SSR. We also need to know user's locale already on the server and force Tolgee\nto use it through ",(0,a.kt)("inlineCode",{parentName:"p"},"forceLanguage"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import localeEn from 'i18n/en.json';\nimport localeDe from 'i18n/de.json';\n\n...\n\nconst App = () {\n  // this needs to work on server\n  const locale = ?\n\n  return (\n    <TolgeeProvider\n      forceLanguage={currentLocale}\n      staticData={{\n        en: localeEn,\n        de: localeDe,\n      }}\n      ...\n    >\n      ...\n    </TolgeePrivider>\n  )\n}\n")),(0,a.kt)("p",null,"With this approach we include all translations directly in the bundle regardless user locale. For smaller projects this\nis not a big issue, however it might be significant for large applications with\nmany translations and languages. "),(0,a.kt)("p",null,"For these cases we need to only provide statically the locale, that the user is currently\nusing. We can also use async functions in ",(0,a.kt)("inlineCode",{parentName:"p"},"staticData")," which will be used for fetching translations dynamically on client\nside (you can use this instead of having them in public folder)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"const App = () {\n  // we need to get these on server, which we'll need to implement\n  // differently for each framework\n  const locale = ?\n  const localeTranslations = ?\n\n  return (\n    <TolgeeProvider\n      forceLanguage={currentLocale}\n      staticData={{\n        en: () => import('i18n/en.json'),\n        de: () => import('i18n/de.json'),\n        [locale]: localeTranslations\n      }}\n      ...\n    >\n      ...\n    </TolgeePrivider>\n  )\n}\n")),(0,a.kt)("h2",{id:"language-changing"},"Language changing"),(0,a.kt)("p",null,"When we use SSR, we have to specify language in a way that is detectable by both client and server. Easiest way is to\ninclude it directly in URL - both next.js and Gatsby have support for this."),(0,a.kt)("p",null,"Then for language change we use the native way of the framework (Tolgee than changes the language\nwhen it detects ",(0,a.kt)("inlineCode",{parentName:"p"},"forceLanguage")," prop change)."))}p.isMDXComponent=!0}}]);