"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[7468],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=p(a),h=r,d=m["".concat(s,".").concat(h)]||m[h]||g[h]||i;return a?n.createElement(d,l(l({ref:t},u),{},{components:a})):n.createElement(d,l({ref:t},u))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},91486:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>g,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const i={id:"translating",title:"Translating with Angular",sidebar_label:"Translating",slug:"/web/using_with_angular/translating"},l=void 0,o={unversionedId:"web/using_with_angular/translating",id:"web/using_with_angular/translating",title:"Translating with Angular",description:"To get full image of working Angular integration check our Angular example application.",source:"@site/docs/web/using_with_angular/translating.mdx",sourceDirName:"web/using_with_angular",slug:"/web/using_with_angular/translating",permalink:"/docs/web/using_with_angular/translating",draft:!1,editUrl:"https://github.com/tolgee/documentation/tree/main/docs/web/using_with_angular/translating.mdx",tags:[],version:"current",frontMatter:{id:"translating",title:"Translating with Angular",sidebar_label:"Translating",slug:"/web/using_with_angular/translating"},sidebar:"someSidebar",previous:{title:"Installation",permalink:"/docs/web/using_with_angular/installation"},next:{title:"Switching languages",permalink:"/docs/web/using_with_angular/switching_languages"}},s={},p=[{value:"Using pipe",id:"using-pipe",level:2},{value:"Element with <code>t</code> attribute",id:"element-with-t-attribute",level:2},{value:"Using translate methods",id:"using-translate-methods",level:2},{value:"Parameter interpolation",id:"parameter-interpolation",level:2},{value:"Safe translating (without wrapping)",id:"safe-translating-without-wrapping",level:2},{value:"Changing language",id:"changing-language",level:2},{value:"Obtaining current language",id:"obtaining-current-language",level:2},{value:"Subscribing to language change event",id:"subscribing-to-language-change-event",level:2},{value:"Translations with HTML tags",id:"translations-with-html-tags",level:2},{value:"Message format",id:"message-format",level:2}],u={toc:p};function g(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"To get full image of working Angular integration check our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/tolgee/ngx-example"},"Angular example application"),"."),(0,r.kt)("p",null,"To translate strings in Angular you can use pipe or translation methods."),(0,r.kt)("h2",{id:"using-pipe"},"Using pipe"),(0,r.kt)("p",null,"To translate a string use ",(0,r.kt)("a",{parentName:"p",href:"/docs/web/using_with_angular/api#translate-pipe"},(0,r.kt)("inlineCode",{parentName:"a"},"translate"))," pipe."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},"<h1>{{'hello_world' | translate}}</h1>\n")),(0,r.kt)("p",null,"To provide parameters for translation pass them as first parameter of ",(0,r.kt)("inlineCode",{parentName:"p"},"translate")," pipe."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'params = {name: "John Doe"};\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},"<h1>{{'hello' | translate:params}}</h1>\n")),(0,r.kt)("p",null,"You can also provide default value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},"<h1>{{'hello' | translate:params:'Default!'}}</h1> // with params\n<h1>{{'hello' | translate:'Default!'}}</h1> // or without params\n")),(0,r.kt)("h2",{id:"element-with-t-attribute"},(0,r.kt)("a",{parentName:"h2",href:"/docs/web/using_with_angular/api#tcomponent"},"Element with ",(0,r.kt)("inlineCode",{parentName:"a"},"t")," attribute")),(0,r.kt)("p",null,"You can also use ",(0,r.kt)("a",{parentName:"p",href:"/docs/web/using_with_angular/api#tcomponent"},"element with ",(0,r.kt)("inlineCode",{parentName:"a"},"t"))," attribute. Angular will render Tolgee component with ",(0,r.kt)("inlineCode",{parentName:"p"},"t")," attribute selector."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<h1 t key="providing_default_values"></h1>\n<p t key="Peter has n dogs" [params]="params"></p> // with params\n')),(0,r.kt)("p",null,"Default value can be provided as well"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<p t key="using_t_with_default" default="This is default"></p>\n')),(0,r.kt)("h2",{id:"using-translate-methods"},"Using translate methods"),(0,r.kt)("p",null,"To translate texts in your component code use ",(0,r.kt)("a",{parentName:"p",href:"/docs/web/using_with_angular/api#method-get"},(0,r.kt)("inlineCode",{parentName:"a"},"get")),"\nor ",(0,r.kt)("a",{parentName:"p",href:"/docs/web/using_with_angular/api#method-instant"},(0,r.kt)("inlineCode",{parentName:"a"},"instant")),"  method."),(0,r.kt)("p",null,"These methods are part of translateService, which can be injected by dependency injection:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import {Component, OnInit} from '@angular/core';\nimport {TranslateService} from \"@tolgee/ngx\";\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n\n  constructor(private translateService: TranslateService) {}\n\n  helloWorld: string;\n\n  async ngOnInit(): Promise<void> {\n    this.translateService.get('hello_world').subscribe(r => this.helloWorld = r);\n  }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"get")," method returns ",(0,r.kt)("a",{parentName:"p",href:"https://rxjs-dev.firebaseapp.com/guide/observable"},(0,r.kt)("strong",{parentName:"a"},"Observable"))," as the result. That means, the\nresult is provided asynchronously, when the localization strings are loaded."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"this.translateService.get('hello_world').subscribe(r => this.helloWorld = r);\n")),(0,r.kt)("p",null,"If you are unable to use this asynchronous approach for some reason, you can use\n",(0,r.kt)("a",{parentName:"p",href:"/docs/web/using_with_angular/api#method-instant"},(0,r.kt)("inlineCode",{parentName:"a"},"instant"))," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"this.helloWorld = this.translateService.instant('hello_world');\n")),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"Don't overuse ",(0,r.kt)("a",{parentName:"p",href:"/docs/web/using_with_angular/api#method-instant"},(0,r.kt)("inlineCode",{parentName:"a"},"instant"))," method. When it's possible\nalways use ",(0,r.kt)("a",{parentName:"p",href:"/docs/web/using_with_angular/api#method-get"},(0,r.kt)("inlineCode",{parentName:"a"},"get"))," method. When the translations are not loaded,\n",(0,r.kt)("a",{parentName:"p",href:"/docs/web/using_with_angular/api#method-instant"},(0,r.kt)("inlineCode",{parentName:"a"},"instant"))," method will not provide a valid result.\nUnfortunately this can happen just in ",(0,r.kt)("strong",{parentName:"p"},"production")," mode, so this\ncould lead to very confusing bugs.")),(0,r.kt)("h2",{id:"parameter-interpolation"},"Parameter interpolation"),(0,r.kt)("p",null,"If you would like to provide parameters for interpolation, pass your params object as second parameter\nto ",(0,r.kt)("a",{parentName:"p",href:"/docs/web/using_with_angular/api#method-get"},(0,r.kt)("inlineCode",{parentName:"a"},"get"))," or\n",(0,r.kt)("a",{parentName:"p",href:"/docs/web/using_with_angular/api#method-instant"},(0,r.kt)("inlineCode",{parentName:"a"},"instant"))," functions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"this.translateService.get('hello', {name: \"John Doe\"}).subscribe(r => this.hello = r);\n")),(0,r.kt)("h2",{id:"safe-translating-without-wrapping"},"Safe translating (without wrapping)"),(0,r.kt)("p",null,"When translating with Tolgee, there could be situations, when your texts are rendered incorrectly because of\n",(0,r.kt)("a",{parentName:"p",href:"/docs/web/wrapping"},"wrapping"),".\nFor example encoded strings like ",(0,r.kt)("inlineCode",{parentName:"p"},"%-%tolgee:something%-%")," will be rendered in your document or tooltips will be rendered\nwith incorrect width. To handle this, you can disable wrapping and let Tolgee to translate texts right away."),(0,r.kt)("p",null,"To avoid wrapping of localization string in development mode use\n",(0,r.kt)("a",{parentName:"p",href:"/docs/web/using_with_angular/api#stranslate-pipe"},(0,r.kt)("inlineCode",{parentName:"a"},"stranslate"))," pipe,\n",(0,r.kt)("a",{parentName:"p",href:"/docs/web/using_with_angular/api#method-getsafe"},(0,r.kt)("inlineCode",{parentName:"a"},"getSafe"))," or\n",(0,r.kt)("a",{parentName:"p",href:"/docs/web/using_with_angular/api#method-instantsafe"},(0,r.kt)("inlineCode",{parentName:"a"},"instantSafe"))," methods."),(0,r.kt)("p",null,"Doing this will disable in-context localization for this string."),(0,r.kt)("h2",{id:"changing-language"},"Changing language"),(0,r.kt)("p",null,"To change language, use ",(0,r.kt)("a",{parentName:"p",href:"/docs/web/using_with_angular/api#method-setlang"},(0,r.kt)("inlineCode",{parentName:"a"},"setLang"))," method of\n",(0,r.kt)("a",{parentName:"p",href:"/docs/web/using_with_angular/api#translateservice"},(0,r.kt)("inlineCode",{parentName:"a"},"translateService")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'this.translateService.setLang("en");\n')),(0,r.kt)("h2",{id:"obtaining-current-language"},"Obtaining current language"),(0,r.kt)("p",null,"To obtain current language, use ",(0,r.kt)("a",{parentName:"p",href:"/docs/web/using_with_angular/api#method-getcurrentlang"},(0,r.kt)("inlineCode",{parentName:"a"},"getCurrentLang")),"\nmethod of ",(0,r.kt)("a",{parentName:"p",href:"/docs/web/using_with_angular/api#translateservice"},(0,r.kt)("inlineCode",{parentName:"a"},"translateService")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"this.translateService.getCurrentLang();\n")),(0,r.kt)("h2",{id:"subscribing-to-language-change-event"},"Subscribing to language change event"),(0,r.kt)("p",null,"Your imperatively translated texts will be not automatically updated in production mode. To do so, you will need to\nlisten to onLanguageChange EventEmitter and refresh your values manually."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"  async ngOnInit(): Promise<void> {\n    this.refresh()\n    this.translateService.onLangChange.subscribe(() => this.refresh());\n  }\n\n  private refresh() {\n    this.translateService.get('hello').subscribe(r => this.hello = r);\n  }\n")),(0,r.kt)("h2",{id:"translations-with-html-tags"},"Translations with HTML tags"),(0,r.kt)("p",null,"Our JS SDKs currently don't support rendering of HTML tags natively. However, if you really really need to render HTML tags there is a way."),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"This is dangerous, and you should know what you are doing.")),(0,r.kt)("p",null,"Consider a translation value:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"'<h1>'Hello'</h1>'\n")),(0,r.kt)("p",null,"Notice that ",(0,r.kt)("inlineCode",{parentName:"p"},"h1")," tags are wrapped with ",(0,r.kt)("inlineCode",{parentName:"p"},"'")," characters. This tells ICU message formatter to ignore those tags.\nTo get HTML you can use ",(0,r.kt)("a",{parentName:"p",href:"/docs/web/using_with_angular/api#method-getsafe"},(0,r.kt)("inlineCode",{parentName:"a"},"TranslateService.getSafe"))," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"this.translateService\n  .getSafe('key_with_html_translation', undefined)\n  .subscribe(\n    (r) => (this.translated = r) // r is <h1>Hello</h1>\n  );\n")),(0,r.kt)("p",null,"Nice, but Angular doesn't allow us to set HTML into element so easily, so we have to set it using ",(0,r.kt)("inlineCode",{parentName:"p"},"[innerHtml]")," attribute,\nwhich enables us to set inner HTML of the element."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<div\n  data-tolgee-key-only="key_with_html_translation"\n  [innerHtml]="translated"\n></div>\n')),(0,r.kt)("p",null,"Using ",(0,r.kt)("inlineCode",{parentName:"p"},"data-tolgee-key-only")," we tell Tolgee, that there is a key in the element. So it will enable its in-context localization."),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"Using of ",(0,r.kt)("inlineCode",{parentName:"p"},"[innerHtml]")," attribute is not safe, since somebody can simply inject an HTML into a parameter. When you are\ndoing this you have to be sure, that your translation or params don't contain any dangerous HTML code."),(0,r.kt)("p",{parentName:"admonition"},"TIP: Maybe you can remove tags from your translated value or parameters using ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/striptags"},"striptags library"),".")),(0,r.kt)("h2",{id:"message-format"},"Message format"),(0,r.kt)("p",null,"All Tolgee integrations follow ICU message format standard."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"{dogsCount, plural, one {One dog is} other {# dogs are}} here.")),(0,r.kt)("p",null,"To read more about it, check\n",(0,r.kt)("a",{parentName:"p",href:"/docs/icu_message_format"},"ICU Message Format")," documentation page."),(0,r.kt)("p",null,"All Tolgee JS integrations are using ",(0,r.kt)("a",{parentName:"p",href:"https://formatjs.io/docs/intl-messageformat/"},"MessageFormat class of formatJs library"),"."))}g.isMDXComponent=!0}}]);