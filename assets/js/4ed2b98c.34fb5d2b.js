"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[9549],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=r.createContext({}),s=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,d=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),g=s(n),u=o,y=g["".concat(d,".").concat(u)]||g[u]||p[u]||a;return n?r.createElement(y,i(i({ref:t},c),{},{components:n})):r.createElement(y,i({ref:t},c))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=g;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},52875:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=n(87462),o=(n(67294),n(3905));const a={id:"adding_loading_overlay",title:"Adding loading overlay",sidebar_label:"Adding loading overlay",slug:"/web/get_started/adding_loading_overlay"},i=void 0,l={unversionedId:"web/get_started/adding_loading_overlay",id:"web/get_started/adding_loading_overlay",title:"Adding loading overlay",description:"As Tolgee loads the localization files from REST API or from provided localization files, user could",source:"@site/docs/web/get_started/adding_loading_overlay.mdx",sourceDirName:"web/get_started",slug:"/web/get_started/adding_loading_overlay",permalink:"/docs/web/get_started/adding_loading_overlay",draft:!1,editUrl:"https://github.com/tolgee/documentation/tree/main/docs/web/get_started/adding_loading_overlay.mdx",tags:[],version:"current",frontMatter:{id:"adding_loading_overlay",title:"Adding loading overlay",sidebar_label:"Adding loading overlay",slug:"/web/get_started/adding_loading_overlay"},sidebar:"someSidebar",previous:{title:"Preparing for production",permalink:"/docs/web/get_started/preparing_for_production"},next:{title:"Translating imperatively",permalink:"/docs/web/get_started/translating_imperatively"}},d={},s=[],c={toc:s};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"As Tolgee loads the localization files from REST API or from provided localization files, user could\nsee untranslated texts with their wrappers such as ",(0,o.kt)("inlineCode",{parentName:"p"},"{{helo_world}}")," which is not what you want. To avoid this behaviour we can\nadd a loading overlay and remove it when translations load."),(0,o.kt)("p",null,"To do so add to your page some overlaying div like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<div id="loading" style="\n            position: fixed;\n            top:0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background-color: white;\n            display: flex;\n            align-items: center;\n            justify-content: center;">\n    Loading...\n</div>\n')),(0,o.kt)("p",null,"In a real page you should probably put your styles in separate style file or at least into ",(0,o.kt)("inlineCode",{parentName:"p"},"<style>")," tag.\nFor the demonstration, we will stick with inline styles."),(0,o.kt)("p",null,"This div will cover all visible content so user won't see anything else. This code makes it disappear in the right time:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'tg.run().then(() => {\n    document.getElementById("loading").style.display = "none";\n})\n')),(0,o.kt)("p",null,"You should end up this document:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <title>hello world</title>\n</head>\n<body>\n    <div id="loading" style="\n        position: fixed;\n        top:0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color: white;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    ">\n    Loading...\n    </div>\n    <h1>{{hello_world}}</h1>\n</body>\n<script src="https://unpkg.com/@tolgee/core"><\/script>\n<script src="https://unpkg.com/@tolgee/ui"><\/script>\n<script>\nconst { Tolgee, IcuFormatter } = window["@tolgee/core"]\nconst tg = Tolgee.use(IcuFormatter).init({\n    apiUrl: "https://app.tolgee.io",\n    apiKey: "you_secret_api_key",\n    inputPrefix: "{{",\n    inputSuffix: "}}",\n    watch: true,\n    ui: window["@tolgee/ui"].UI,\n});\ntg.run().then(() => {\n    document.getElementById("loading").style.display = "none";\n})\n<\/script>\n</html>\n')))}p.isMDXComponent=!0}}]);