"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[2625],{3905:(e,t,o)=>{o.d(t,{Zo:()=>c,kt:()=>d});var n=o(67294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(o),d=r,m=u["".concat(l,".").concat(d)]||u[d]||g[d]||a;return o?n.createElement(m,i(i({ref:t},c),{},{components:o})):n.createElement(m,i({ref:t},c))}));function d(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=o.length,i=new Array(a);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<a;p++)i[p]=o[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,o)}u.displayName="MDXCreateElement"},24195:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>g,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var n=o(87462),r=(o(67294),o(3905));const a={slug:"tolgee-support-only-postgres-since-v2",title:"Why Tolgee supports only PostgreSQL since v2",description:"Tolgee localization tool is dropping H2 database and supports only PostgreSQL since version 2.",authors:["jcizmar"],tags:["tolgee","database","postgres","h2","server"],image:"/img/blog/postgres.png"},i=void 0,s={permalink:"/blog/tolgee-support-only-postgres-since-v2",editUrl:"https://github.com/tolgee/documentation/tree/main/blog/2022-01-06-tolgee-support-only-postgresql-since-v2.md",source:"@site/blog/2022-01-06-tolgee-support-only-postgresql-since-v2.md",title:"Why Tolgee supports only PostgreSQL since v2",description:"Tolgee localization tool is dropping H2 database and supports only PostgreSQL since version 2.",date:"2022-01-06T00:00:00.000Z",formattedDate:"January 6, 2022",tags:[{label:"tolgee",permalink:"/blog/tags/tolgee"},{label:"database",permalink:"/blog/tags/database"},{label:"postgres",permalink:"/blog/tags/postgres"},{label:"h2",permalink:"/blog/tags/h-2"},{label:"server",permalink:"/blog/tags/server"}],readingTime:2.875,hasTruncateMarker:!0,authors:[{name:"Jan Cizmar \ud83d\ude0e",title:"Founder & Full-stack Architect",url:"https://github.com/JanCizmar",imageURL:"https://avatars.githubusercontent.com/u/18496315?v=4",key:"jcizmar"}],frontMatter:{slug:"tolgee-support-only-postgres-since-v2",title:"Why Tolgee supports only PostgreSQL since v2",description:"Tolgee localization tool is dropping H2 database and supports only PostgreSQL since version 2.",authors:["jcizmar"],tags:["tolgee","database","postgres","h2","server"],image:"/img/blog/postgres.png"},prevItem:{title:"Taking localization to i18next level",permalink:"/blog/taking-localization-to-i18next-level"},nextItem:{title:"Using invisible text for better localization",permalink:"/blog/2021/12/17/invisible-characters-for-better-localization"}},l={authorsImageUrls:[void 0]},p=[{value:"Cool Postgres features we need",id:"cool-postgres-features-we-need",level:2},{value:"Better search",id:"better-search",level:3},{value:"Text similarity",id:"text-similarity",level:3},{value:"How it&#39;s going to work now?",id:"how-its-going-to-work-now",level:2},{value:"TL;DR",id:"tldr",level:2}],c={toc:p};function g(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"When I started to develop Tolgee for my master thesis about 2 years ago, one of my goals was to provide a localization\ntool also for developers who would like to use it locally on their machine."),(0,r.kt)("p",null,'Things were different those days. Tolgee was named Polygloat and the tool was intended to be simplest as possible. So I\nwanted to keep the tool small, and I didn\'t want to make users to run separate database server for it.\nBut I also wanted to run the app in cloud, where Postgres is considered "more production ready" choice.'),(0,r.kt)("p",null,"To achieve this, supporting also H2 database was the ideal choice, since it can be embedded in Java App and there is no need\nto run separate server for it or manage anyhow. It just starts automatically with the App and that's it.\nFor our cloud instance we used Postgres. We use Hibernate and Liquibase, so there was no need to write single\nnative SQL in the whole code."),(0,r.kt)("p",null,"It was working fine until the system was getting more complex, and we started to look for better text search and text\nmanipulation features. Finally, we came up with a decision to drop H2 support and embed PostgreSQL to ",(0,r.kt)("inlineCode",{parentName:"p"},"tolgee/tolgee"),"\ndocker image to keep the comfort of running a single Docker container and don't worry about configuration."),(0,r.kt)("h2",{id:"cool-postgres-features-we-need"},"Cool Postgres features we need"),(0,r.kt)("p",null,"Currently, there are 2 basic needs we are not able to satisfy supporting H2 database."),(0,r.kt)("h3",{id:"better-search"},"Better search"),(0,r.kt)("p",null,"In translation view, users can search for translations using simple search input. The best we can do in H2 is making the\nstring lower case and using ",(0,r.kt)("inlineCode",{parentName:"p"},"like")," operator to find matches."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select * from translation where lower(text) like lower('%searchtext%') \n")),(0,r.kt)("p",null,'But users speaking different languages are often used to type search strings without accents and expect to get\nresults with accents. For example in the Czech language, users often type just "cislo" and they expect to also get results\ncontaining "\u010d\xedslo". There is no simple solution in H2 db for this, but there are multiple solutions in Postgres like\nusing ',(0,r.kt)("inlineCode",{parentName:"p"},"unaccent")," function or using ",(0,r.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/9.5/textsearch.html"},"Full Text Search")," features,\nwhich also can handle typos."),(0,r.kt)("h3",{id:"text-similarity"},"Text similarity"),(0,r.kt)("p",null,"Another important feature we need, is finding similarity of two texts, which we need to implement translation memory (\nreusing strings already translated before). In H2 database there is no built-in function returning an information about\nhow two string are similar. However, in Postgres there is a\n",(0,r.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/9.6/pgtrgm.html"},(0,r.kt)("inlineCode",{parentName:"a"},"pg_trgm"))," module with ",(0,r.kt)("inlineCode",{parentName:"p"},"similarity")," method, which is exactly what we\nneed."),(0,r.kt)("h2",{id:"how-its-going-to-work-now"},"How it's going to work now?"),(0,r.kt)("p",null,"Since version 2 of the Tolgee Platform, Postgres is embedded in the\n",(0,r.kt)("a",{parentName:"p",href:"/docs/platform/self_hosting/running_with_docker"},(0,r.kt)("inlineCode",{parentName:"a"},"tolgee/tolgee")," Docker image"),". Tolgee starts Postgre\nserver automatically on its startup. So you can still run Tolgee with no configuration just by running the\nsingle Docker container.  "),(0,r.kt)("p",null,"There is also ",(0,r.kt)("inlineCode",{parentName:"p"},"DOCKER")," mode of ",(0,r.kt)("a",{parentName:"p",href:"/docs/platform/self_hosting/configuration#postgres-autostart"},(0,r.kt)("inlineCode",{parentName:"a"},"tolgee-autostart")),",\nwhich tries to start Postgres Docker container on the host machine.\nThis mode is introduced primarily for development, but it can be helpful also for users who would like to run Tolgee\noutside of Docker container with Java, and they don't want to configure Postgres themselves."),(0,r.kt)("h2",{id:"tldr"},"TL;DR"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Tolgee is dropping H2 database, since it doesn't have features we need for further development."),(0,r.kt)("li",{parentName:"ul"},"We are going to implement Translation memory and improve search in translation view"),(0,r.kt)("li",{parentName:"ul"},"You can still run Tolgee with Docker using a single command"),(0,r.kt)("li",{parentName:"ul"},"Postgres is now embedded in ",(0,r.kt)("inlineCode",{parentName:"li"},"tolgee/tolgee")," Docker image")))}g.isMDXComponent=!0}}]);