"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[2649],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),g=o,m=d["".concat(s,".").concat(g)]||d[g]||u[g]||i;return n?r.createElement(m,a(a({ref:t},p),{},{components:n})):r.createElement(m,a({ref:t},p))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},43352:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const i={id:"tolgee_js_version_3",title:"Tolgee JS v3"},a=void 0,l={unversionedId:"changelog/tolgee_js_version_3",id:"changelog/tolgee_js_version_3",title:"Tolgee JS v3",description:"New initialization",source:"@site/docs/changelog/tolgee_js_version_3.mdx",sourceDirName:"changelog",slug:"/changelog/tolgee_js_version_3",permalink:"/docs/changelog/tolgee_js_version_3",draft:!1,editUrl:"https://github.com/tolgee/documentation/tree/main/docs/changelog/tolgee_js_version_3.mdx",tags:[],version:"current",frontMatter:{id:"tolgee_js_version_3",title:"Tolgee JS v3"},sidebar:"someSidebar",previous:{title:"Tolgee JS v4",permalink:"/docs/changelog/tolgee_js_version_4"},next:{title:"Tolgee Server v2",permalink:"/docs/changelog/tolgee_server_version_2"}},s={},c=[{value:"New initialization",id:"new-initialization",level:3},{value:"<code>wrapperMode</code> setting",id:"wrappermode-setting",level:3}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"new-initialization"},"New initialization"),(0,o.kt)("p",null,"Icu formatter is now separated as a module and so by default Tolgee instance is without formatter. We now recommend use ",(0,o.kt)("inlineCode",{parentName:"p"},"Tolgee.init")," instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"new Tolgee"),", which is now private. This doesn't affect majority of integrations, because Tolgee is initialized internally there, however in vanilla JS it's important."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// old way (now will give you typescript error)\nimport { Tolgee } from '@tolgee/core'\nconst tg = new Tolgee(...)\n\n// equivalent new way\nimport { Tolgee, IcuFormatter } from '@tolgee/core'\nconst tg = Tolgee.use(IcuFormatter).init(...)\n\n// new way without formatter\nconst tg = Tolgee.init(...)\n")),(0,o.kt)("p",null,"We've changed this so it's possible to use core without IcuFormatter and therefore decrease bundle size\nwhen we don't need it."),(0,o.kt)("h3",{id:"wrappermode-setting"},(0,o.kt)("inlineCode",{parentName:"h3"},"wrapperMode")," setting"),(0,o.kt)("p",null,"We now have a new way how to wrap translations (docs ",(0,o.kt)("a",{parentName:"p",href:"../web/configuration#wrappermode"},"here"),")"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"Tolgee.init({\n  ...\n  wrapperMode: 'invisible' // 'text' is default\n})\n")),(0,o.kt)("p",null,"It's intended for framework integrations for the future as it uses zero-width unicode characters to identify\nthe translation - this way we want to reduce cases where wrapping causes problems and must be ommited.\nAlso this can be used with 3rd pary libraries (e.g. i18next), to preserve in-context localization functionality."))}u.isMDXComponent=!0}}]);