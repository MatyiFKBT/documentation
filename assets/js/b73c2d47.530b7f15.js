"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[7024],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>c});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),u=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=u(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),g=u(n),c=i,f=g["".concat(p,".").concat(c)]||g[c]||d[c]||r;return n?a.createElement(f,l(l({ref:t},s),{},{components:n})):a.createElement(f,l({ref:t},s))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=g;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var u=2;u<r;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},48673:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>u});var a=n(87462),i=(n(67294),n(3905));const r={id:"configuration",title:"Configuration",sidebar_label:"Configuration",slug:"/web/configuration"},l=void 0,o={unversionedId:"web/configuration",id:"web/configuration",title:"Configuration",description:"All Tolgee JS integrations such as integration library for Angular or React share the same configuration properties.",source:"@site/docs/web/configuration.mdx",sourceDirName:"web",slug:"/web/configuration",permalink:"/docs/web/configuration",draft:!1,editUrl:"https://github.com/tolgee/documentation/tree/main/docs/web/configuration.mdx",tags:[],version:"current",frontMatter:{id:"configuration",title:"Configuration",sidebar_label:"Configuration",slug:"/web/configuration"},sidebar:"someSidebar",previous:{title:"Wrapping",permalink:"/docs/web/wrapping"},next:{title:"In-context translating",permalink:"/docs/web/in_context"}},p={},u=[{value:"Configuration properties",id:"configuration-properties",level:2},{value:"apiUrl",id:"apiurl",level:3},{value:"apiKey",id:"apikey",level:3},{value:"inputPrefix and inputSuffix",id:"inputprefix-and-inputsuffix",level:3},{value:"defaultLanguage",id:"defaultlanguage",level:3},{value:"fallbackLanguage",id:"fallbacklanguage",level:3},{value:"forceLanguage",id:"forcelanguage",level:3},{value:"preloadFallback",id:"preloadfallback",level:3},{value:"availableLanguages",id:"availablelanguages",level:3},{value:"enableLanguageStore",id:"enablelanguagestore",level:3},{value:"enableLanguageDetection",id:"enablelanguagedetection",level:3},{value:"filesUrlPrefix",id:"filesurlprefix",level:3},{value:"staticData",id:"staticdata",level:3},{value:"watch",id:"watch",level:3},{value:"ui",id:"ui",level:3},{value:"targetElement",id:"targetelement",level:3},{value:"tagAttributes",id:"tagattributes",level:3},{value:"highlightKeys",id:"highlightkeys",level:3},{value:"passToParent",id:"passtoparent",level:3},{value:"restrictedElement",id:"restrictedelement",level:3},{value:"highlightColor",id:"highlightcolor",level:3},{value:"highlightWidth",id:"highlightwidth",level:3},{value:"wrapperMode",id:"wrappermode",level:3}],s={toc:u};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"All Tolgee JS integrations such as integration library for Angular or React share the same configuration properties."),(0,i.kt)("h2",{id:"configuration-properties"},"Configuration properties"),(0,i.kt)("h3",{id:"apiurl"},"apiUrl"),(0,i.kt)("p",null,"Url of Tolgee server."),(0,i.kt)("h3",{id:"apikey"},"apiKey"),(0,i.kt)("p",null,"Your api key, which can be ",(0,i.kt)("a",{parentName:"p",href:"/docs/platform/api-keys-and-pat-tokens"},"obtained using Tolgee web application."),".\nWhen both ",(0,i.kt)("inlineCode",{parentName:"p"},"apiKey")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"apiUrl")," properties are provided, Tolgee runs in ",(0,i.kt)("inlineCode",{parentName:"p"},"development")," mode,\notherwise it runs in ",(0,i.kt)("inlineCode",{parentName:"p"},"production")," mode."),(0,i.kt)("h3",{id:"inputprefix-and-inputsuffix"},"inputPrefix and inputSuffix"),(0,i.kt)("p",null,"In development mode, strings to be translated are wrapped by ",(0,i.kt)("inlineCode",{parentName:"p"},"@tolgee/core")," library at first and then parsed and replaced with\ntranslated value. This mechanism is called ",(0,i.kt)("a",{parentName:"p",href:"/docs/web/wrapping"},"wrapping"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"inputPrefix")," is inserted before the encoded string and ",(0,i.kt)("inlineCode",{parentName:"p"},"inputSuffix")," is inserted after the string. By those 2 strings\nTolgee recognises strings, which are meant to be translated, so its good idea to make them unique enough not to collide\nwith any other strings, which can appear in DOM."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"inputPrefix = '%-%tolgee:';\ninputSuffix = '%-%';\n")),(0,i.kt)("p",null,"These strings are unique enough to not clash with any other strings in your DOM, so it will not break your document."),(0,i.kt)("h3",{id:"defaultlanguage"},"defaultLanguage"),(0,i.kt)("p",null,"Default language to be set by as currentLanguage default. (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"en"),")"),(0,i.kt)("h3",{id:"fallbacklanguage"},"fallbackLanguage"),(0,i.kt)("p",null,"When translation is not provided in current language, Tolgee tries to find it in fallbackLanguage.\n(default: value of ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultLanguage")," property)"),(0,i.kt)("h3",{id:"forcelanguage"},"forceLanguage"),(0,i.kt)("p",null,"By default, Tolgee tries to set the language according to user's system language. Sometimes you need to force it to\nuse specific language. For example when you are working with SSR or your language is determined by route.\nProviding value to forceLanguage will disable language switching and Tolgee will use just the forced language."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const config = {\n  forceLanguage: 'en'\n}\n")),(0,i.kt)("h3",{id:"preloadfallback"},"preloadFallback"),(0,i.kt)("p",null,"When ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," Tolgee loads both current language and fallback language before promise is resolved from ",(0,i.kt)("inlineCode",{parentName:"p"},"Tolgee.run()")," method.\nOtherwise, Tolgee will try to load fallback language localization data just when it's needed (when some translation is missing in current language).\nThat way some inappropriate value may be rendered when some text is missing in current language. (default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),")"),(0,i.kt)("h3",{id:"availablelanguages"},"availableLanguages"),(0,i.kt)("p",null,"Tolgee chooses language automatically by user's default language provided by\n",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/NavigatorLanguage/language"},"browser navigator object"),". To do so, it\nneeds to know which languages are available to determine whether user's preferred language is supported by your app."),(0,i.kt)("p",null,"If user's language is not available, ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultLanguage")," is used instead."),(0,i.kt)("p",null,"Default: ",(0,i.kt)("inlineCode",{parentName:"p"},"['en']")),(0,i.kt)("h3",{id:"enablelanguagestore"},"enableLanguageStore"),(0,i.kt)("p",null,"Automatically store user language in localStorage. (default ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),")"),(0,i.kt)("h3",{id:"enablelanguagedetection"},"enableLanguageDetection"),(0,i.kt)("p",null,"Use auto language detection by browser locale. (default ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),")"),(0,i.kt)("h3",{id:"filesurlprefix"},"filesUrlPrefix"),(0,i.kt)("p",null,"In production mode, localization texts are loaded from json files, which are loaded from url prefixed with this property\nvalue."),(0,i.kt)("p",null,'When your current language is "en" and your ',(0,i.kt)("inlineCode",{parentName:"p"},"filesUrlPrefix")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"https://example.com/loc/files/"),",\nyour localization data will be loaded from file loaded from url ",(0,i.kt)("inlineCode",{parentName:"p"},"https://example.com/loc/files/en.json"),"."),(0,i.kt)("p",null,"You can obtain these files by ",(0,i.kt)("a",{parentName:"p",href:"/docs/platform/exporting_translations"},"downloading them from Tolgee Web Application")),(0,i.kt)("h3",{id:"staticdata"},"staticData"),(0,i.kt)("p",null,"Using this property, you can provide localization data to Tolgee as an object. Tolgee will use this data in production mode."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import * as localeEn from 'i18n/en.json';\nimport * as localeDe from 'i18n/de.json';\n\n...\nconst config = {\n  staticData: {\n        en: localeEn,\n        de: localeDe,\n      }\n  };\n")),(0,i.kt)("p",null,"or you can provide the data using provider functions returning promises, so it works great with dynamic import feature:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const config = {\n  staticData: {\n        en: () => import('./i18n/en.json'),\n        de: () => import('./i18n/de.json'),\n      }\n  };\n")),(0,i.kt)("h3",{id:"watch"},"watch"),(0,i.kt)("p",null,"In development mode, watch is always set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," because Tolgee needs to find strings to replace with translated values\nevery time when DOM is changed. In production mode, watching is not always necessary because integration libraries for\nReact and Angular return translated values directly without wrapping, so wrapped encoded strings are never inserted to DOM."),(0,i.kt)("p",null,"If you are not using any JS framework, and you wish Tolgee to replace wrapped encoded texts even in production mode, set\nthis to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"watch: true")," is used in ",(0,i.kt)("a",{parentName:"p",href:"/docs/web/get_started/preparing_for_production"},"preparing for production part")," or get started tutorial,\nbecause this tutorial is framework independent and so no framework integration library is used."),(0,i.kt)("h3",{id:"ui"},"ui"),(0,i.kt)("p",null,"To use Tolgee in development with in-context localization, you need to provide a constructor for UI class."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'ui: window["@tolgee/ui"].UI,\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"@tolgee/core")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"@tolgee/ui")," are separated to reduce size of ",(0,i.kt)("inlineCode",{parentName:"p"},"@tolgee/core")," library while ",(0,i.kt)("inlineCode",{parentName:"p"},"ui")," library is needed just\nin development mode and may be omitted in production mode."),(0,i.kt)("h3",{id:"targetelement"},"targetElement"),(0,i.kt)("p",null,"Element where wrapped strings are expected in development mode. (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"document.body"),")"),(0,i.kt)("h3",{id:"tagattributes"},"tagAttributes"),(0,i.kt)("p",null,"Tolgee is able to watch also for wrapped localization strings in attributes of DOM elements. These attributes must be\nspecified in these configuration properties."),(0,i.kt)("p",null,"Default:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"tagAttributes: {\n    textarea: ['placeholder'],\n    input: ['value', 'placeholder'],\n    img: ['alt'],\n    '*': ['aria-label', 'title'],\n}\n")),(0,i.kt)("h3",{id:"highlightkeys"},"highlightKeys"),(0,i.kt)("p",null,"By default, in development mode, when you move mouse over an element containing translated text and key ",(0,i.kt)("inlineCode",{parentName:"p"},"ALT")," is down,\nthis element is highlighted by changing its background color. To modify the key use ",(0,i.kt)("inlineCode",{parentName:"p"},"highlightKeys")," property."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'import {ModifierKey} from "../clients/js/packages/core/lib/index";\n\n...\n\n    highlightKeys: [ModifierKey.Shift, ModifierKey.Alt]\n')),(0,i.kt)("p",null,"Default: ",(0,i.kt)("inlineCode",{parentName:"p"},"[ModifierKey.Alt]")),(0,i.kt)("h3",{id:"passtoparent"},"passToParent"),(0,i.kt)("p",null,"There are elements which can contain wrapped string to be translated, but user is not able to click on them. For example\nan option of ",(0,i.kt)("inlineCode",{parentName:"p"},"select")," HTML element cannot be used for capturing click even with ",(0,i.kt)("inlineCode",{parentName:"p"},"ALT"),' down. For these reasons you can\nconfigure Tolgee to "pass" these strings to parent and listen for click events on the parent.'),(0,i.kt)("p",null,"Default: ",(0,i.kt)("inlineCode",{parentName:"p"},'["option", "optgroup"]')),(0,i.kt)("h3",{id:"restrictedelement"},"restrictedElement"),(0,i.kt)("p",null,"Array of elements in which you don't want Tolgee to replace wrapped strings."),(0,i.kt)("p",null,"Default: ",(0,i.kt)("inlineCode",{parentName:"p"},"['script', 'style']")),(0,i.kt)("h3",{id:"highlightcolor"},"highlightColor"),(0,i.kt)("p",null,"Highlighter border color."),(0,i.kt)("p",null,"Default: ",(0,i.kt)("inlineCode",{parentName:"p"},"rgb(255 0 0)"),"\xa0","\xa0",(0,i.kt)("div",{style:{border:"5px solid rgb(255 0 0)",borderRadius:"4px",width:"20px",height:"20px",display:"inline-block",verticalAlign:"middle"}})),(0,i.kt)("h3",{id:"highlightwidth"},"highlightWidth"),(0,i.kt)("p",null,"Border width of highlighter."),(0,i.kt)("p",null,"Default: ",(0,i.kt)("inlineCode",{parentName:"p"},"5px")),(0,i.kt)("h3",{id:"wrappermode"},"wrapperMode"),(0,i.kt)("p",null,"Will determine how are translations wrapped (",(0,i.kt)("a",{parentName:"p",href:"./wrapping"},"read more"),")"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"text")," (default) - uses standard wrapping"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"invisible")," (experimental) - uses zero width invisible characters to encode key info directly into translation")))}d.isMDXComponent=!0}}]);