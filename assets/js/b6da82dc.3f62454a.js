"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[7432],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=s(n),g=r,m=c["".concat(p,".").concat(g)]||c[g]||u[g]||o;return n?a.createElement(m,i(i({ref:t},d),{},{components:n})):a.createElement(m,i({ref:t},d))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},69741:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const o={id:"api",title:"Tolgee for Svelte API",sidebar_label:"API",slug:"/web/using_with_svelte/api"},i=void 0,l={unversionedId:"web/using_with_svelte/api",id:"web/using_with_svelte/api",title:"Tolgee for Svelte API",description:"TolgeeProvider",source:"@site/docs/web/using_with_svelte/api.mdx",sourceDirName:"web/using_with_svelte",slug:"/web/using_with_svelte/api",permalink:"/docs/web/using_with_svelte/api",draft:!1,editUrl:"https://github.com/tolgee/documentation/tree/main/docs/web/using_with_svelte/api.mdx",tags:[],version:"current",frontMatter:{id:"api",title:"Tolgee for Svelte API",sidebar_label:"API",slug:"/web/using_with_svelte/api"},sidebar:"someSidebar",previous:{title:"Preparing for production",permalink:"/docs/web/using_with_svelte/preparing_for_production"},next:{title:"Installation",permalink:"/docs/web/using_with_i18next/installation"}},p={},s=[{value:"<code>TolgeeProvider</code>",id:"tolgeeprovider",level:2},{value:"Prop <code>config</code>",id:"prop-config",level:4},{value:"Slot <code>loading-fallback</code>",id:"slot-loading-fallback",level:4},{value:"T component",id:"t-component",level:2},{value:"Prop <code>keyName</code>",id:"prop-keyname",level:4},{value:"Prop <code>parameters?</code>",id:"prop-parameters",level:4},{value:"Prop <code>noWrap?</code>",id:"prop-nowrap",level:4},{value:"Prop <code>defaultValue?</code>",id:"prop-defaultvalue",level:4},{value:"<code>getTranslate</code> function",id:"gettranslate-function",level:2},{value:"Parameter <code>key</code>",id:"parameter-key",level:4},{value:"Parameter <code>parameters?</code>",id:"parameter-parameters",level:4},{value:"Parameter <code>noWrap?</code>",id:"parameter-nowrap",level:4},{value:"Parameter <code>defaultValue?</code>",id:"parameter-defaultvalue",level:4},{value:"Function <code>getLanguageStore</code>",id:"function-getlanguagestore",level:2}],d={toc:s};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"tolgeeprovider"},(0,r.kt)("a",{parentName:"h2",href:"/docs/web/using_with_svelte/api#tolgeeprovider"},(0,r.kt)("inlineCode",{parentName:"a"},"TolgeeProvider"))),(0,r.kt)("p",null,"Provides Tolgee instance. Use in root of your application."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-svelte"},'<script>\n  import { TolgeeProvider } from "@tolgee/svelte";\n\n  const tolgeeConfig = {\n   ...\n  }\n<\/script>\n\n<TolgeeProvider config={tolgeeConfig}>\n  <div slot="loading-fallback">Loading...</div>\n  <slot />\n</TolgeeProvider>\n')),(0,r.kt)("h4",{id:"prop-config"},"Prop ",(0,r.kt)("inlineCode",{parentName:"h4"},"config")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"../configuration"},(0,r.kt)("inlineCode",{parentName:"a"},"TolgeeConfig"))," object, which is passed to Tolgee instance."),(0,r.kt)("h4",{id:"slot-loading-fallback"},"Slot ",(0,r.kt)("inlineCode",{parentName:"h4"},"loading-fallback")),(0,r.kt)("p",null,"Slot which is rendered, when translations are loading. It's not rendered, when translations are provided through\nstaticData config property as object in production mode."),(0,r.kt)("p",null,"Example when ",(0,r.kt)("inlineCode",{parentName:"p"},"loading-fallback")," is  ",(0,r.kt)("strong",{parentName:"p"},"not")," rendered:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import enLang from "../i18n/en.json" // data is static\nconst tolgeeConfig = {\n  // ...\n  staticData: {\n    en: enLang\n  }\n};\n')),(0,r.kt)("p",null,"Example when ",(0,r.kt)("inlineCode",{parentName:"p"},"loading-fallback")," is rendered:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const tolgeeConfig = {\n  ...\n  staticData: {\n    en: () => import("../i18n/en.json") // data is provided as function returning Promise of data\n  }\n};\n')),(0,r.kt)("h2",{id:"t-component"},"T component"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-svelte"},'<script>\n  import { T } from "@tolgee/svelte";\n<\/script>\n\n<T keyName="keyName" parameters="{{parameter: \'value\'}}" />\n')),(0,r.kt)("h4",{id:"prop-keyname"},"Prop ",(0,r.kt)("inlineCode",{parentName:"h4"},"keyName")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"String")," - translation key."),(0,r.kt)("h4",{id:"prop-parameters"},"Prop ",(0,r.kt)("inlineCode",{parentName:"h4"},"parameters?")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Record<string, string>")," - variable parameters, which can be used in translation value\n(read more about ",(0,r.kt)("a",{parentName:"p",href:"../../icu_message_format"},"ICU message format"),")."),(0,r.kt)("h4",{id:"prop-nowrap"},"Prop ",(0,r.kt)("inlineCode",{parentName:"h4"},"noWrap?")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Boolean")," (default: ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"false")," - in development mode translation will be ",(0,r.kt)("a",{parentName:"li",href:"../wrapping"},"wrapped")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"true")," - use when wrapping in dev mode causes problems, in this case in-context translation won't work")),(0,r.kt)("h4",{id:"prop-defaultvalue"},"Prop ",(0,r.kt)("inlineCode",{parentName:"h4"},"defaultValue?")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"String")," - You can pass default value, which will be rendered if there is no translation\nfor this key (in selected language nor base language). If you won't provide this value, ",(0,r.kt)("inlineCode",{parentName:"p"},"keyName")," will be rendered instead."),(0,r.kt)("h2",{id:"gettranslate-function"},(0,r.kt)("inlineCode",{parentName:"h2"},"getTranslate")," function"),(0,r.kt)("p",null,"Returns store containing translating function"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"function t(\n  key: string,\n  parameters: Record<string, string>,\n  noWrap?: boolean,\n  defaultValue?: string\n): string\n\n// or with options object\nfunction t(options: {\n  key: string;\n  parameters?: Record<string, string>;\n  noWrap?: boolean;\n  defaultValue?: string;\n}): string\n")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-svelte"},'<script>\n  import { getTranslate } from "@tolgee/svelte";\n\n  const t = getTranslate();\n\n  t.subscribe((fn) =>\n    // translated value will be printed every time language or translation changes\n    console.log(fn({\n      key: "key",\n      defaultValue: "Defaaaault!",\n      noWrap: true,\n      parameters: { param: "value" }\n    }))\n  );\n<\/script>\n\n\x3c!--or in template `$` does the subscribe magic--\x3e\n{$t({ key: \'key\', defaultValue: \'Defaaaault!\' })}\n')),(0,r.kt)("h4",{id:"parameter-key"},"Parameter ",(0,r.kt)("inlineCode",{parentName:"h4"},"key")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"String")," - translation key"),(0,r.kt)("h4",{id:"parameter-parameters"},"Parameter ",(0,r.kt)("inlineCode",{parentName:"h4"},"parameters?")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Record<string, string>")," - variable parameters, which can be used in translation value\n(read more about ",(0,r.kt)("a",{parentName:"p",href:"../../icu_message_format"},"ICU message format"),")"),(0,r.kt)("h4",{id:"parameter-nowrap"},"Parameter ",(0,r.kt)("inlineCode",{parentName:"h4"},"noWrap?")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Boolean")," (default: ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"false")," - in development mode translation will be ",(0,r.kt)("a",{parentName:"li",href:"../wrapping"},"wrapped")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"true")," - use when wrapping in dev mode causes problems, or you pass write it outside the DOM\n(for example ",(0,r.kt)("inlineCode",{parentName:"li"},"document.title"),"), in this case in-context translation won't work")),(0,r.kt)("h4",{id:"parameter-defaultvalue"},"Parameter ",(0,r.kt)("inlineCode",{parentName:"h4"},"defaultValue?")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"String")," - It will be rendered if there is no translation for this key (in selected language nor base language).\nIf you don't provide this value, ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," will be rendered instead."),(0,r.kt)("h2",{id:"function-getlanguagestore"},"Function ",(0,r.kt)("inlineCode",{parentName:"h2"},"getLanguageStore")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Writable<string>")," - Writeable store containing the current language. (see ",(0,r.kt)("a",{parentName:"p",href:"/docs/web/using_with_svelte/switching_language"},"Switching language"),")"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'<script>\n  import {getLanguageStore} from "@tolgee/svelte";\n\n  const languageStore = getLanguageStore();\n\n  languageStore.subscribe((lang) => console.log(lang));\n<\/script>\n')))}u.isMDXComponent=!0}}]);