"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[6526],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=o,g=u["".concat(s,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},55676:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));const a={id:"running_with_docker",title:"Running with Docker",sidebar_label:"Running with Docker",slug:"/platform/self_hosting/running_with_docker"},i=void 0,l={unversionedId:"platform/self_hosting/running_with_docker",id:"platform/self_hosting/running_with_docker",title:"Running with Docker",description:"Since v2, Tolgee runs PostgreSQL database in its container by default. To disable embedded Postgres, set",source:"@site/docs/platform/self_hosting/running_with_docker.mdx",sourceDirName:"platform/self_hosting",slug:"/platform/self_hosting/running_with_docker",permalink:"/docs/platform/self_hosting/running_with_docker",draft:!1,editUrl:"https://github.com/tolgee/documentation/tree/main/docs/platform/self_hosting/running_with_docker.mdx",tags:[],version:"current",frontMatter:{id:"running_with_docker",title:"Running with Docker",sidebar_label:"Running with Docker",slug:"/platform/self_hosting/running_with_docker"},sidebar:"someSidebar",previous:{title:"Translation tools",permalink:"/docs/platform/translation_tools"},next:{title:"Running with Java",permalink:"/docs/platform/self_hosting/running_with_java"}},s={},p=[{value:"Running Tolgee in single container (recommended)",id:"running-tolgee-in-single-container-recommended",level:2},{value:"Running with compose",id:"running-with-compose",level:2}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Since v2, Tolgee runs PostgreSQL database in its container by default. To disable embedded Postgres, set\n",(0,o.kt)("inlineCode",{parentName:"p"},"tolgee.postgres-autostart.enabled")," property to ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),".")),(0,o.kt)("h2",{id:"running-tolgee-in-single-container-recommended"},"Running Tolgee in single container (recommended)"),(0,o.kt)("p",null,"To run server locally you should be fine just with running simple Docker image with mounted data volume.\nTolgee has embedded PostgreSQL database, so you don't have to manually set it."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"docker run -v tolgee_data:/data/ -p 8085:8080 tolgee/tolgee\n")),(0,o.kt)("p",null,"This will:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"mount tolgee_data volume into it's directory inside the container"),(0,o.kt)("li",{parentName:"ul"},"expose tolgee container port on port 8085"),(0,o.kt)("li",{parentName:"ul"},"run the image!")),(0,o.kt)("p",null,"Now you should be able to access Tolgee web application on ",(0,o.kt)("a",{parentName:"p",href:"http://localhost:8085"},"http://localhost:8085")),(0,o.kt)("h2",{id:"running-with-compose"},"Running with compose"),(0,o.kt)("p",null,"To run it on company infrastructure it is better to use some more optimized database system. Tolgee supports PostgreSQL.\nYou can run it using docker-compose.\nTo start let's create and enter a folder to store Tolgee related files:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"mkdir tolgee && cd tolgee\n")),(0,o.kt)("p",null,"Create a file named ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," containing following content."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="docker-compose.yml"',title:'"docker-compose.yml"'},'version: \'3\'\n\nservices:\n  db:\n    image: postgres:11\n    environment:\n      - POSTGRES_PASSWORD=postgres\n  app:\n    image: tolgee/tolgee\n    volumes:\n     - ./data:/data\n    ports:\n      - "8090:8080"\n    env_file:\n      - .env\n    depends_on:\n      - "db"\n')),(0,o.kt)("p",null,"To provide a configuration, add following .env file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-properties",metastring:'title=".env"',title:'".env"'},"spring.datasource.url=jdbc:postgresql://db:5432/postgres\nspring.datasource.username=postgres\nspring.datasource.password=postgres\ntolgee.postgres-autostart.enabled=false\n")),(0,o.kt)("p",null,"Similarly, you can define other ",(0,o.kt)("a",{parentName:"p",href:"configuration"},"configuration properties"),"."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},'Some versions of docker-compose doesn\'t accept dots (".") in ',(0,o.kt)("inlineCode",{parentName:"p"},".env")," file key names. Then you can replace ",(0,o.kt)("inlineCode",{parentName:"p"},".")," characters with\nunderscores ",(0,o.kt)("inlineCode",{parentName:"p"},"_"),"."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-properties",metastring:'title=".env"',title:'".env"'},"spring_datasource_url=jdbc:postgresql://db:5432/postgres\nspring_datasource_username=postgres\nspring_datasource_password=postgres\ntolgee_postgres-autostart_enabled=false\n"))),(0,o.kt)("p",null,"Your initial username is ",(0,o.kt)("inlineCode",{parentName:"p"},"admin"),". Initial password is automatically generated and stored in /data/initial.pwd file in the\nTolgee container. You can print it by executing this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cat data/initial.pwd\n")),(0,o.kt)("p",null,"The is now accessible on ",(0,o.kt)("a",{parentName:"p",href:"http://localhost:8090"},"http://localhost:8090"),"."))}d.isMDXComponent=!0}}]);