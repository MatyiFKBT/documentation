"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[8549],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),g=o,m=d["".concat(l,".").concat(g)]||d[g]||c[g]||a;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},55861:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));const a={id:"using_with_next",title:"Using with Next.js",sidebar_label:"Using with Next.js",slug:"/web/using_with_react/ssr/using_with_next"},i=void 0,s={unversionedId:"web/using_with_react/ssr/using_with_next",id:"web/using_with_react/ssr/using_with_next",title:"Using with Next.js",description:"To use localize your Next.js app you can use the Next.js i18n-routing feature.",source:"@site/docs/web/using_with_react/ssr/using_with_next.mdx",sourceDirName:"web/using_with_react/ssr",slug:"/web/using_with_react/ssr/using_with_next",permalink:"/docs/web/using_with_react/ssr/using_with_next",draft:!1,editUrl:"https://github.com/tolgee/documentation/tree/main/docs/web/using_with_react/ssr/using_with_next.mdx",tags:[],version:"current",frontMatter:{id:"using_with_next",title:"Using with Next.js",sidebar_label:"Using with Next.js",slug:"/web/using_with_react/ssr/using_with_next"},sidebar:"someSidebar",previous:{title:"SSR support",permalink:"/docs/web/using_with_react/ssr/ssr"},next:{title:"Using with Gatsby",permalink:"/docs/web/using_with_react/ssr/using_with_gatsby"}},l={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Prepare your next-config",id:"prepare-your-next-config",level:2},{value:"Set up your environment.",id:"set-up-your-environment",level:2},{value:"Save exported data to project structure",id:"save-exported-data-to-project-structure",level:2},{value:"Add TolgeeProvider",id:"add-tolgeeprovider",level:2},{value:"Change language with next.js router",id:"change-language-with-nextjs-router",level:2},{value:"Use T component to translate something",id:"use-t-component-to-translate-something",level:2}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"To use localize your Next.js app you can use the Next.js ",(0,o.kt)("a",{parentName:"p",href:"https://nextjs.org/docs/advanced-features/i18n-routing"},"i18n-routing feature"),"."),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Created Next.js project with installed ",(0,o.kt)("inlineCode",{parentName:"li"},"@tolgee/react")," module"),(0,o.kt)("li",{parentName:"ol"},"Created project in Tolgee platform with 2 languages. In our case it is English (en) and Czech (cs)."),(0,o.kt)("li",{parentName:"ol"},"Added some localization key and translations for both languages. In our case the key name is ",(0,o.kt)("inlineCode",{parentName:"li"},"hello_world")),(0,o.kt)("li",{parentName:"ol"},"Generated API key for your project"),(0,o.kt)("li",{parentName:"ol"},"Exported data as zip of jsons (stored somewhere)")),(0,o.kt)("h2",{id:"prepare-your-next-config"},"Prepare your next-config"),(0,o.kt)("p",null,"First you have to add i18n settings into your ",(0,o.kt)("inlineCode",{parentName:"p"},"next-config.js"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"/** @type {import('next').NextConfig} */\nmodule.exports = {\n    reactStrictMode: true,\n    i18n: {\n        locales: ['en', 'cs'],\n        localeDetection: true,\n        defaultLocale: \"en\"\n    },\n}\n")),(0,o.kt)("h2",{id:"set-up-your-environment"},"Set up your environment."),(0,o.kt)("p",null,"Create file (if not exists) ",(0,o.kt)("inlineCode",{parentName:"p"},".env.development.local")," and add this content to it"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"NEXT_PUBLIC_TOLGEE_API_KEY=<your api key>\nNEXT_PUBLIC_TOLGEE_API_URL=https://app.tolgee.io\n")),(0,o.kt)("p",null,"Then replace ",(0,o.kt)("inlineCode",{parentName:"p"},"<your api key>")," with your generated API key."),(0,o.kt)("h2",{id:"save-exported-data-to-project-structure"},"Save exported data to project structure"),(0,o.kt)("p",null,"Save exported json files to ",(0,o.kt)("inlineCode",{parentName:"p"},"i18n")," folder in your project structure."),(0,o.kt)("h2",{id:"add-tolgeeprovider"},"Add TolgeeProvider"),(0,o.kt)("p",null,"Then wrap your main component with ",(0,o.kt)("inlineCode",{parentName:"p"},"TolgeeProvider component"),".\nImport the localization data and provide them to TolgeeProvider using ",(0,o.kt)("inlineCode",{parentName:"p"},"staticData")," prop."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"jsx",jsx:!0},'import \'../styles/globals.css\'\nimport type {AppProps} from \'next/app\'\nimport enLocale from "../i18n/en.json";\nimport csLocale from "../i18n/cs.json";\nimport {useRouter} from "next/router";\nimport {TolgeeProvider} from "@tolgee/react";\n\nfunction MyApp({Component, pageProps}: AppProps) {\n    const {locale: activeLocale} = useRouter()\n\n    return <TolgeeProvider\n        forceLanguage={activeLocale}\n        apiKey={process.env.NEXT_PUBLIC_TOLGEE_API_KEY}\n        apiUrl={process.env.NEXT_PUBLIC_TOLGEE_API_URL}\n        staticData={{\n            en: enLocale,\n            cs: csLocale\n        }}\n    >\n        <Component {...pageProps} />\n    </TolgeeProvider>\n}\n\nexport default MyApp\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"forceLanguage")," prop forces Tolgee to use the language which is provided by Next.js. It will not try to change it\nusing its own way."),(0,o.kt)("p",null,"We can optimize bundle size by only including locale which is needed for rendered page by using getInitialProps."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"\nfunction MyApp({Component, pageProps, locales}: AppProps) {\n    const {locale: activeLocale} = useRouter()\n\n    return <TolgeeProvider\n        ui={UI}\n        forceLanguage={activeLocale}\n        apiKey={process.env.NEXT_PUBLIC_TOLGEE_API_KEY}\n        apiUrl={process.env.NEXT_PUBLIC_TOLGEE_API_URL}\n        staticData={{\n            en: () => import('../i18n/en.json'),\n            cs: () => import('../i18n/cs.json'),\n            ...locales\n        }}\n    >\n        <Component {...pageProps} />\n    </TolgeeProvider>\n}\n\nMyApp.getInitialProps = async (context) => {\n  const locale = context.router.locale;\n  const result = {\n    locales: {\n      [locale]: await import(`../i18n/${locale}.json`),\n    },\n  };\n  return result;\n};\n")),(0,o.kt)("p",null,"Similarly, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"getServerSideProps")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"getStaticProps")," on each page."),(0,o.kt)("h2",{id:"change-language-with-nextjs-router"},"Change language with next.js router"),(0,o.kt)("p",null,"As we need locale information both on server and client we need to use next.js native way."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'import { useRouter } from \'next/router\';\n\nexport const LangSelector: React.FC = () => {\n  const router = useRouter();\n  const setLanguage = (lang: string) => {\n    router.replace(router.pathname, undefined, { locale: lang });\n  };\n\n  return (\n    <select\n      onChange={(e) => setLanguage(e.target.value)}\n      value={router.locale}\n    >\n      <option value="en">\ud83c\uddec\ud83c\udde7 English</option>\n      <option value="cs">\ud83c\udde8\ud83c\uddff \u010cesky</option>\n    </select>\n  );\n};\n')),(0,o.kt)("h2",{id:"use-t-component-to-translate-something"},"Use T component to translate something"),(0,o.kt)("p",null,"Use T component to translate some text somewhere in your app."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"jsx",jsx:!0},"<h1><T>hello_world</T></h1>\n")),(0,o.kt)("p",null,"You are done! Now you can translate your strings directly in your application, and enjoy the features of Next.js in the same time!\nYou can find the example application code in this repo: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/tolgee/next-example"},"github.com/tolgee/next-example"),"."),(0,o.kt)("p",null,"Now you can use translation methods described ",(0,o.kt)("a",{parentName:"p",href:"../translating"},"here"),"."))}c.isMDXComponent=!0}}]);